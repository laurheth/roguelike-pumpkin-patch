(()=>{"use strict";var t=function(){return(t=Object.assign||function(t){for(var e,n=1,i=arguments.length;n<i;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},e="pumpkin-tile";const n=function(){function n(t,n,i){this.element=document.createElement("div"),this.element.classList.add(e);var o=t.content,r=void 0===o?"":o,s=t.color,a=void 0===s?"":s,l=t.background,h=void 0===l?"":l,c=t.className,u=void 0===c?"":c,p=t.classList,f=void 0===p?[]:p;!function(t,e){var n={};for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&e.indexOf(i)<0&&(n[i]=t[i]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(i=Object.getOwnPropertySymbols(t);o<i.length;o++)e.indexOf(i[o])<0&&Object.prototype.propertyIsEnumerable.call(t,i[o])&&(n[i[o]]=t[i[o]])}}(t,["content","color","background","className","classList"]),this.content=r,this.color=a,this.background=h,f.length>0?this.classList=f:this.className=u,this.tileWidth=(null==i?void 0:i.tileWidth)?i.tileWidth:16,this.tileHeight=(null==i?void 0:i.tileHeight)?i.tileHeight:this.tileWidth,this.position=n}return Object.defineProperty(n.prototype,"content",{get:function(){return this._content},set:function(t){if(this.confirmContentElement(),this._content!==t){if("string"==typeof t)this.contentElement.innerHTML=t;else{for(;this.contentElement.lastElementChild;)this.contentElement.removeChild(this.contentElement.lastElementChild);this.contentElement.appendChild(t)}this._content=t}},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"background",{get:function(){return this._background},set:function(t){t!==this._background&&(this._background=t,this.element.style.backgroundColor=t)},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"color",{get:function(){return this._color},set:function(t){t!==this._color&&(this._color=t,this.element.style.color=t)},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"position",{get:function(){return this._position},set:function(e){this._position=t({},e),this.element.style.left=e.x*this.tileWidth+"px",this.element.style.top=e.y*this.tileHeight+"px"},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"tileWidth",{get:function(){return this._tileWidth},set:function(t){this._tileWidth=t,this.element.style.width=t+"px"},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"tileHeight",{get:function(){return this._tileHeight},set:function(t){this._tileHeight=t,this.element.style.height=t+"px"},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"className",{get:function(){return this.classList.join(" ")},set:function(t){this.classList=t?t.split(" "):[]},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"classList",{get:function(){return function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var i=Array(t),o=0;for(e=0;e<n;e++)for(var r=arguments[e],s=0,a=r.length;s<a;s++,o++)i[o]=r[s];return i}([e],this._classList)},set:function(t){var n,i,o=this;this._classList||(this._classList=[]),t.length===this._classList.length&&t.every((function(t){return o._classList.includes(t)}))&&this._classList.every((function(e){return t.includes(e)}))||(this._classList.length>0&&(n=this.element.classList).remove.apply(n,this._classList),this._classList=t.filter((function(t){return t.trim()&&t!==e})),t.length>0&&(i=this.element.classList).add.apply(i,this.classList))},enumerable:!1,configurable:!0}),n.prototype.setOptions=function(t){var e=t.content,n=void 0===e?"":e,i=t.background,o=void 0===i?"":i,r=t.color,s=void 0===r?"":r,a=t.className,l=void 0===a?"":a,h=t.classList;this.content=n,this.background=o,this.color=s,h?this.classList=h:this.className=l},n.prototype.updateOptions=function(t){var e=t.content,n=t.background,i=t.color,o=t.className,r=t.classList;void 0!==e&&(this.content=e),void 0!==n&&(this.background=n),void 0!==i&&(this.color=i),r&&r.length>0?this.classList=r:void 0!==o&&(this.className=o)},n.prototype.confirmContentElement=function(){this.contentElement||(this.contentElement=document.createElement("div"),this.element.appendChild(this.contentElement))},n}();const i=function(){function t(t){var e=t.target,n=t.width,i=void 0===n?1:n,o=t.height,r=void 0===o?1:o,s=t.tileWidth,a=t.tileHeight;!function(t,e){var n={};for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&e.indexOf(i)<0&&(n[i]=t[i]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(i=Object.getOwnPropertySymbols(t);o<i.length;o++)e.indexOf(i[o])<0&&Object.prototype.propertyIsEnumerable.call(t,i[o])&&(n[i[o]]=t[i[o]])}}(t,["target","width","height","tileWidth","tileHeight"]),this.target=e,this.target.className?this.target.classList.add("pumpkin-container"):this.target.className="pumpkin-container",this.element=document.createElement("div"),this.element.className="pumpkin-display",this.element.setAttribute("aria-hidden","true"),this.dimensions={width:i,height:r},this.tileSize={tileWidth:s||16,tileHeight:a||s||16},this.applyDefaultStyles(),this.target.appendChild(this.element)}return Object.defineProperty(t.prototype,"tileSize",{get:function(){return this._tileSize},set:function(t){var e;this._tileSize=t,this.element.style.fontSize=t.tileHeight+"px",null===(e=this.tiles)||void 0===e||e.forEach((function(e){e.tileWidth=t.tileWidth,e.tileHeight=t.tileHeight,e.position=e.position})),this.resetSize()},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"dimensions",{get:function(){return{width:this._width,height:this._height}},set:function(t){t.width!==this._width&&t.height!==this._height&&(this._width=t.width,this._height=t.height,this.allocateDisplay(),this.resetSize(),this.moveToCenter())},enumerable:!1,configurable:!0}),t.prototype.resetSize=function(){this._width&&this._height&&this.tileSize&&(this.element.style.width=this._width*this.tileSize.tileWidth+"px",this.element.style.height=this._height*this.tileSize.tileHeight+"px")},t.prototype.centerDisplay=function(t,e){this.centerPosition=void 0===t||void 0===e?void 0:{x:t,y:e},this.moveToCenter()},t.prototype.moveToCenter=function(){if(this.centerPosition){var t=(this.centerPosition.x+.5)/this.dimensions.width,e=(this.centerPosition.y+.5)/this.dimensions.height;this.element.style.transform="translate("+100*-t+"%,"+100*-e+"%)"}else this.element.style.transform=""},t.prototype.allocateDisplay=function(){var t=this;this.tiles&&this.tiles.forEach((function(e){t.element.removeChild(e.element)})),this.tiles=[];for(var e=0;e<this._height;e++)for(var i=0;i<this._width;i++){var o=new n({content:""},{x:i,y:e},this.tileSize);this.tiles.push(o),this.element.appendChild(o.element)}},t.prototype.getTile=function(t,e){if(t>=0&&t<this._width&&e>=0&&e<this._height){var n=t+e*this._width;return this.tiles[n]}},t.prototype.formatTileOptions=function(t){return"string"==typeof t||t instanceof HTMLElement?{content:t}:t},t.prototype.setTile=function(t,e,n){var i=this.getTile(t,e);i&&i.setOptions(this.formatTileOptions(n))},t.prototype.updateTile=function(t,e,n){var i=this.getTile(t,e);i&&i.updateOptions(this.formatTileOptions(n))},t.prototype.calculateDimensions=function(t){void 0===t&&(t=this.target.getBoundingClientRect());var e=Math.abs(t.right-t.left),n=Math.abs(t.bottom-t.top);return{width:Math.floor(e/this.tileSize.tileWidth),height:Math.floor(n/this.tileSize.tileHeight)}},t.prototype.calculateTileSize=function(t){void 0===t&&(t=this.target.getBoundingClientRect());var e=Math.abs(t.right-t.left),n=Math.abs(t.bottom-t.top),i={tileWidth:e/this.dimensions.width,tileHeight:n/this.dimensions.height},o=Math.min(i.tileWidth,i.tileHeight);return{tileWidth:o,tileHeight:o}},t.prototype.applyDefaultStyles=function(){var t="pumpkin-default-styles";if(!document.getElementById(t)){var e=document.createElement("style");e.id=t,e.type="text/css",e.appendChild(document.createTextNode("\n.pumpkin-container {\n    position: relative;\n    overflow: hidden;\n    background-color: #000000;\n    color: #ffffff;\n}\n\n.pumpkin-display {\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n}\n\n.pumpkin-tile {\n    position: absolute;\n}\n\n.pumpkin-tile > * {\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n    z-index: 10;\n}\n"));var n=document.head,i=document.querySelector("style, link");n.insertBefore(e,i)}},t}();const o=function(){function t(t){t||(t={});var e=t.type,n=void 0===e?"simple":e;this.type=n,this.queue=[],this.time=0}return t.prototype.add=function(t){var e={};if(t instanceof Function?e.callback=t:"act"in t?e.actor=t:Object.assign(e,t),void 0===e.repeats&&e.actor&&(e.repeats=!0),"complex"===this.type){e.delay||(e.delay=1);var n=e.delay+this.time;if(0===this.queue.length||this.queue[this.queue.length-1].time<=n)this.queue.push({event:e,time:n});else for(var i=0;i<this.queue.length;i++)if(n<this.queue[i].time){this.queue.splice(i,0,{event:e,time:n});break}}else this.queue.push({event:e,time:0})},t.prototype.advance=function(){return t=this,e=void 0,i=function(){var t;return function(t,e){var n,i,o,r,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return r={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function a(r){return function(a){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,i&&(o=2&r[0]?i.return:r[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,r[1])).done)return o;switch(i=0,o&&(r=[2&r[0],o.value]),r[0]){case 0:case 1:o=r;break;case 4:return s.label++,{value:r[1],done:!1};case 5:s.label++,i=r[1],r=[0];continue;case 7:r=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==r[0]&&2!==r[0])){s=0;continue}if(3===r[0]&&(!o||r[1]>o[0]&&r[1]<o[3])){s.label=r[1];break}if(6===r[0]&&s.label<o[1]){s.label=o[1],o=r;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(r);break}o[2]&&s.ops.pop(),s.trys.pop();continue}r=e.call(t,s)}catch(t){r=[6,t],i=0}finally{n=o=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,a])}}}(this,(function(e){switch(e.label){case 0:if(0===this.queue.length)throw new Error("Event queue is empty.");return t=this.queue.shift(),this.time=t.time,"number"==typeof t.event.repeats&&t.event.repeats--,t.event.repeats&&this.add(t.event),t.event.callback?[4,t.event.callback()]:[3,2];case 1:e.sent(),e.label=2;case 2:return t.event.actor?[4,t.event.actor.act()]:[3,4];case 3:e.sent(),e.label=4;case 4:return[2]}}))},new((n=void 0)||(n=Promise))((function(o,r){function s(t){try{l(i.next(t))}catch(t){r(t)}}function a(t){try{l(i.throw(t))}catch(t){r(t)}}function l(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}l((i=i.apply(t,e||[])).next())}));var t,e,n,i},t.prototype.remove=function(t){var e=this,n=[];this.queue.forEach((function(e,i){e.event.actor===t&&n.push(i)})),n.reverse(),n.forEach((function(t){e.queue.splice(t,1)}))},Object.defineProperty(t.prototype,"length",{get:function(){return this.queue.length},enumerable:!1,configurable:!0}),t}(),r=function(){function t(t,e){t||(t=Date.now()),this.seed=Math.floor(t),this.weyl=0,this.x=0,this.base=e||1e5;for(var n=0;n<10;n++)this.getRandom()}return t.prototype.getRandom=function(){return this.x*=this.x,this.x+=this.weyl+=this.seed,this.x=(this.x>>>32|this.x<<32)>>>0,this.x%this.base/this.base},t.prototype.getNumber=function(t,e,n){return void 0===n&&Number.isInteger(t)&&Number.isInteger(e)&&(n=!0),n?Math.floor(this.getRandom()*(e+1-t))+Math.ceil(t):this.getRandom()*(e-t)+t},t.prototype.getRandomElement=function(t){return t[this.getNumber(0,t.length-1,!0)]},t.prototype.getWeightedElement=function(t){var e=0,n=!0;t.forEach((function(t){e+=t.weight,n=n&&Number.isInteger(t.weight)}));for(var i=this.getNumber(n?1:0,e,n),o=0;o<t.length;o++)if((i-=t[o].weight)<=0)return t[o].option;throw new Error("No match found.")},t}();var s=function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var i=Array(t),o=0;for(e=0;e<n;e++)for(var r=arguments[e],s=0,a=r.length;s<a;s++,o++)i[o]=r[s];return i};const a=function(){function t(t){var e=t.canPass,n=t.metric,i=t.maxIterations,o=t.weight;!function(t,e){var n={};for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&e.indexOf(i)<0&&(n[i]=t[i]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(i=Object.getOwnPropertySymbols(t);o<i.length;o++)e.indexOf(i[o])<0&&Object.prototype.propertyIsEnumerable.call(t,i[o])&&(n[i[o]]=t[i[o]])}}(t,["canPass","metric","maxIterations","weight"]),this.canPass=e,n||(n=function(t,e){return Math.abs(e[1]-t[1])+Math.abs(e[0]-t[0])}),o||(o=function(t){return 1}),this.maxIterations=i,this.metric=n,this.weight=o}return t.prototype.findPath=function(t,e,n){var i=this;void 0===n&&(n=!1);for(var o=[],r=this.maxIterations?this.maxIterations:40*this.metric(t,e),a=0,l=[{position:s(t),steps:0,distanceFromGoal:this.metric(t,e),previousLocation:null}],h=[],c=[0,1,1.2];a<r&&!this.contains(l,e);)a++,l.forEach((function(t){for(var o=-1;o<2;o++)for(var r=-1;r<2;r++)if(!n||0===o||0===r){var s=[t.position[0]+o,t.position[1]+r],a=c[Math.abs(o)+Math.abs(r)]*i.weight(s);if(i.canPass(s)){var u=i.getLocation(l,s),p=i.getLocation(h,s);u||p?(u&&u.steps>t.steps+a&&(u.steps=t.steps+a,u.previousLocation=t),p&&p.steps>t.steps+a&&(p.steps=t.steps+a,p.previousLocation=t)):h.push({position:s,steps:t.steps+a,distanceFromGoal:i.metric(s,e),previousLocation:t})}}})),h.sort((function(t,e){return e.steps+e.distanceFromGoal-(t.steps+t.distanceFromGoal)})),l.push(h.pop());var u=this.getLocation(l,e);if(this.contains(l,e))for(a=0;(u.position[0]!==t[0]||u.position[1]!==t[1])&&a<r;)a++,o.push(u.position),u=u.previousLocation;return o.reverse()},t.prototype.isEqual=function(t,e){return t.position[0]===e.position[0]&&t.position[1]===e.position[1]},t.prototype.contains=function(t,e){var n=this;return Array.isArray(e)?t.some((function(t){return t.position[0]===e[0]&&t.position[1]===e[1]})):t.some((function(t){return n.isEqual(t,e)}))},t.prototype.getLocation=function(t,e){for(var n=0,i=t;n<i.length;n++){var o=i[n];if(o.position[0]===e[0]&&o.position[1]===e[1])return o}},t}(),l=function(){function t(t,e){this.canSee=t,this.range=e||8}return t.prototype.look=function(t,e){var n=e||this.range;this.canSee(t);for(var i=[],o=[],r=0,s=0,a=1;a<=n;a++){for(var l=0;l<4;l++)for(var h=-a;h<=a;h++){0===l?(r=h,s=a):1===l?(s=h,r=a):2===l?(r=h,s=-a):(s=h,r=-a);var c=[t[0]+r,t[1]+s];if(!(this.distance(t,c)>n)){var u=this.angleTo(t,c),p=this.angularSize(t,c)/2,f=!1;this.isInShadows(u,i)&&this.isInShadows(u+p,i)&&this.isInShadows(u-p,i)&&(f=!0),!f&&this.canSee(c)||o.push({startAngle:u-p,endAngle:u+p})}}for(;o.length>0;)this.combineShadow(i,o.pop());if(1===i.length&&i[0].endAngle-i[0].startAngle>=360)return}},t.prototype.angleTo=function(t,e){var n=e[1]-t[1],i=e[0]-t[0],o=180*Math.atan2(n,i)/Math.PI;return o>=0?o:o+360},t.prototype.angularSize=function(t,e){var n=this.distance(t,e);return 360*Math.atan(1/(2*n))/Math.PI},t.prototype.distance=function(t,e){return Math.sqrt(Math.pow(e[1]-t[1],2)+Math.pow(e[0]-t[0],2))},t.prototype.isInShadows=function(t,e){for(var n=t-360,i=0,o=e;i<o.length;i++){var r=o[i];if(t<=r.endAngle&&t>=r.startAngle||n<=r.endAngle&&n>=r.startAngle)return!0}return!1},t.prototype.combineShadow=function(t,e){for(var n=[],i=0;i<t.length;i++){var o=t[i];e.startAngle<o.endAngle&&e.endAngle>o.startAngle&&(e.startAngle=Math.min(o.startAngle,e.startAngle),e.endAngle=Math.max(o.endAngle,e.endAngle),n.push(i))}if(n.length>0){var r=t[n.shift()];for(r.startAngle=e.startAngle,r.endAngle=e.endAngle,i=n.length-1;i>=0;i--)t.splice(n[i],1)}else t.push(e)},t}();const h=function(){function t(t){this.contents=t.map((function(t){return function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var i=Array(t),o=0;for(e=0;e<n;e++)for(var r=arguments[e],s=0,a=r.length;s<a;s++,o++)i[o]=r[s];return i}(t)}))}return t.prototype.equals=function(t){return this.compatible(t,0,0)},t.prototype.compatible=function(t,e,n){return this.contents.every((function(i,o){return i.every((function(i,r){var s=r+e,a=o+n;return!(s>=0&&a>=0&&a<t.contents.length&&s<t.contents[a].length)||i===t.contents[a][s]}))}))},t.prototype.constrain=function(t,e,n){return!(n>=0&&n<this.contents.length&&e>=0&&e<this.contents[n].length)||this.contents[n][e]===t},t}();var c=function(t,e){var n={};for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&e.indexOf(i)<0&&(n[i]=t[i]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(i=Object.getOwnPropertySymbols(t);o<i.length;o++)e.indexOf(i[o])<0&&Object.prototype.propertyIsEnumerable.call(t,i[o])&&(n[i[o]]=t[i[o]])}return n};const u=function(){function t(t){var e,n=t.input,i=t.n,o=void 0===i?1:i,s=t.m,a=void 0===s?o:s,l=t.repeatInput,h=void 0!==l&&l,u=t.random,p=(c(t,["input","n","m","repeatInput","random"]),n.map((function(t){return"string"==typeof t?t.split(""):t})));e=this.processInput(p,h,o,a),this.rules=e[0],this.frequencies=e[1],this.n=o,this.m=a,this.random=u||new r}return t.prototype.processInput=function(t,e,n,i){for(var o=t.length,r=o-(e?0:i-1),s=Math.min.apply(Math,t.map((function(t){return t.length}))),a=s-(e?0:n-1),l=[],c=0;c<a;c++)for(var u=0;u<r;u++){for(var p=[],f=0;f<i;f++){for(var d=[],g=(u+f)%o,m=0;m<n;m++){var v=(m+c)%s;d.push(t[g][v])}p.push(d)}var y=new h(p);l.push(y)}var b=[],w=[];return l.forEach((function(t){var e=b.findIndex((function(e){return e.equals(t)}));e>=0?w[e].weight++:(b.push(t),w.push({option:t,weight:1}))})),[b.map((function(t){var e={up:[],down:[],left:[],right:[]};return b.forEach((function(n,i){t.compatible(n,-1,0)&&e.right.push(i),t.compatible(n,1,0)&&e.left.push(i),t.compatible(n,0,-1)&&e.down.push(i),t.compatible(n,0,1)&&e.up.push(i)})),e})),w]},t.prototype.generate=function(t){for(var e=t.width,n=t.height,i=t.repeatOutput,o=(c(t,["width","height","repeatOutput"]),[]),r=[],s=[],a=0;a<n;a++){for(var l=[],h=0;h<e;h++){for(var u=[],p=0;p<this.frequencies.length;p++)for(var f=0;f<this.frequencies[p].weight;f++)u.push(p);var d={options:u,position:[h,a]};l.push(d),r.push(d)}o.push(l)}for(var g=e*n+1;r.length>0&&g>=0;){if(r.sort((function(t,e){return t.options.length-e.options.length})),(d=r.shift()).options.length<=0)return null;var m=[this.random.getRandomElement(d.options)];d.options=m,s.push(d),this.propogate(o,d.position,i),g--}return console.log(o),this.postProcess(o)},t.prototype.postProcess=function(t){for(var e=this,n=t.length+(this.m-1),i=t.length+(this.n-1),o=[],r=0;r<n;r++){for(var s=[],a=0;a<i;a++)s.push(null);o.push(s)}return t.forEach((function(t,n){t.forEach((function(t,i){if(t.options.length>0)for(var r=e.frequencies[t.options[0]].option,s=0;s<e.n;s++)for(var a=0;a<e.m;a++)o[n+a][i+s]=r.contents[a][s]}))})),o},t.prototype.propogate=function(t,e,n){var i=this,o=e[0],r=e[1],s=t[r][o],a={up:[],down:[],left:[],right:[]};s.options.forEach((function(t){var e=i.rules[t];e.up.forEach((function(t){return a.up.push(t)})),e.down.forEach((function(t){return a.down.push(t)})),e.left.forEach((function(t){return a.left.push(t)})),e.right.forEach((function(t){return a.right.push(t)}))})),a.up=a.up.filter((function(t,e,n){return n.indexOf(t)===e})),a.down=a.down.filter((function(t,e,n){return n.indexOf(t)===e})),a.left=a.left.filter((function(t,e,n){return n.indexOf(t)===e})),a.right=a.right.filter((function(t,e,n){return n.indexOf(t)===e}));var l={up:[0,-1],down:[0,1],left:[-1,0],right:[1,0]};["up","down","left","right"].forEach((function(e){var s=o+l[e][0],h=r+l[e][1];if(n&&(s+=t[0].length,s%=t[0].length,h+=t.length,h%=t.length),s>=0&&s<t[0].length&&h>=0&&h<t.length){var c=t[h][s].options.length;t[h][s].options=t[h][s].options.filter((function(t){return a[e].includes(t)})),c>t[h][s].options.length&&i.propogate(t,[s,h],n)}}))},t}(),p={target:document.getElementById("displayExample"),width:20,height:15},f=new i(p);f.tileSize=f.calculateTileSize(),window.addEventListener("resize",(()=>{f.tileSize=f.calculateTileSize()}));for(let t=0;t<p.width;t++)for(let e=0;e<p.height;e++)0===t||0===e||t===p.width-1||e===p.height-1?f.setTile(t,e,{content:"#",className:"brickWall"}):3===t&&5===e?f.setTile(t,e,{content:"@",classList:["player"]}):f.setTile(t,e,{content:".",className:"coolFloor"});for(let t=5;t<10;t++)f.updateTile(t,t,{className:"superAwesome"});const d=()=>{const t=Math.floor(Date.now()),e=new r(t),n=e.getRandom(),i=e.getNumber(0,10),o=e.getNumber(0,10,!1),s=e.getRandomElement([1,2,3,4,5,6,7]),a=e.getWeightedElement([{weight:10,option:"Cute dog"},{weight:15,option:"Awesome cat"},{weight:1,option:"Rare Franklin"}]),l=document.getElementById("randomResults");for(;l.lastChild;)l.removeChild(l.lastChild);const h=function(t,e){const n=document.createElement("li"),i=`${t} : ${e}`;n.appendChild(document.createTextNode(i)),l.appendChild(n)};h("x",n.toString()),h("y",i.toString()),h("noThanksNotInteger",o.toString()),h("randomElement",s.toString()),h("randomWeightedElement",a.toString())};d(),document.getElementById("randomButton").addEventListener("click",d);const g=new i({target:document.querySelector(".colorDisplay"),width:10,height:10});for(let t=0;t<10;t++)for(let e=0;e<10;e++)0===t||0===e||9===t||9===e?g.setTile(t,e,"#"):3===t&&3===e?g.setTile(t,e,"@"):4===t&&5===e?g.setTile(t,e,{content:"g",color:"green",background:"rgba(128,0,0,0.2)"}):g.setTile(t,e,".");g.tileSize=g.calculateTileSize(),g.centerDisplay(3,3);const m=["####################","#..................#","#..#.....#....#....#","#..#.....###...##..#","#..#.....#.........#","#.............####.#","#........#....#....#","####...###....#....#","#........#....#....#","####################"],v=m[0].length,y=m.length,b=new i({target:document.getElementById("fovMap"),width:v,height:y});b.tileSize=b.calculateTileSize();const w=new l((t=>{const e=t[0],n=t[1];if(e<0||e>=v||n<0||n>=y)return!1;const i=m[n][e];return b.setTile(e,n,i),"#"!==i}),20),E=[5,5],O=m[E[1]];m[E[1]]=O.slice(0,E[0])+"@"+O.slice(E[0]+1),w.look(E);const S=document.getElementById("simpleEventList"),x=document.getElementById("complexEventList"),T=(t,e)=>{const n=document.createElement("li");n.appendChild(document.createTextNode(t)),e.appendChild(n)},k=new o({type:"simple"}),L={act:()=>T("The Goblin goblins!",S)},_={act:()=>T("The cat meows!",S)};k.add(L),k.add(_),k.add({callback:()=>T("Drip drip goes the faucet.",S),repeats:!0}),k.add({callback:()=>T("Rushing wind! Oh no!",S),repeats:2}),k.add({callback:()=>T("The house of cards falls over. Whoops!",S)});for(let t=0;t<20;t++)k.advance();const z=new o({type:"complex"}),P={act:()=>T("Fast cat nyooms!",x)},I={act:()=>T("Slow ogre is sloooow",x)};z.add({actor:P,delay:1}),z.add({actor:I,delay:5}),z.add({callback:()=>T("The mail has just arrived. Sweet!",x),delay:16});for(let t=0;t<20;t++)z.advance();m[E[1]]=O.slice(0,E[0])+"."+O.slice(E[0]+1);const j=new i({target:document.getElementById("pathDisplay"),width:v,height:y});j.tileSize=j.calculateTileSize(),m.forEach(((t,e)=>t.split("").forEach(((t,n)=>{j.setTile(n,e,t)}))));const A=[1,8];new a({canPass:([t,e])=>!(t<0||t>=v||e<0||e>=y)&&"#"!==m[e][t]}).findPath(A,[15,8],!1).forEach((([t,e])=>{j.updateTile(t,e,{content:"X",className:"pathMarker"})})),j.updateTile(A[0],A[1],"@"),window.addEventListener("resize",(()=>{g.tileSize=g.calculateTileSize(),b.tileSize=b.calculateTileSize(),j.tileSize=j.calculateTileSize()}));const M=new i({target:document.getElementById("wfcDisplay"),width:20,height:20});M.tileSize=M.calculateTileSize(),new u({input:[".#..",".#..","####",".#.."],n:3,repeatInput:!0}).generate({width:20,height:20,repeatOutput:!0}).forEach(((t,e)=>{t.forEach(((t,n)=>{console.log(t),M.setTile(n,e,t)}))}));const N=new i({target:document.getElementById("wfcDisplayTwo"),width:20,height:20});N.tileSize=N.calculateTileSize(),new u({input:["    #.#        ","    #.#        ","    #.#        ","#####.##       ",".......########","####...........","   ##.#########","    #.#        ","   ##.##  #####","####...####...#","...............","####...####...#","   ##.##  #####"],n:3,repeatInput:!0}).generate({width:20,height:20,repeatOutput:!0}).forEach(((t,e)=>{t.forEach(((t,n)=>{console.log(t),N.setTile(n,e,t)}))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,