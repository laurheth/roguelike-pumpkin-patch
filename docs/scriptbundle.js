(()=>{"use strict";var t=function(){return(t=Object.assign||function(t){for(var e,n=1,i=arguments.length;n<i;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},e="pumpkin-tile";const n=function(){function n(t,n,i){this.element=document.createElement("div"),this.element.classList.add(e);var o=t.content,r=void 0===o?"":o,s=t.color,a=void 0===s?"":s,l=t.background,h=void 0===l?"":l,c=t.className,u=void 0===c?"":c,p=t.classList,f=void 0===p?[]:p;!function(t,e){var n={};for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&e.indexOf(i)<0&&(n[i]=t[i]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(i=Object.getOwnPropertySymbols(t);o<i.length;o++)e.indexOf(i[o])<0&&Object.prototype.propertyIsEnumerable.call(t,i[o])&&(n[i[o]]=t[i[o]])}}(t,["content","color","background","className","classList"]),this.content=r,this.color=a,this.background=h,f.length>0?this.classList=f:this.className=u,this.tileWidth=(null==i?void 0:i.tileWidth)?i.tileWidth:16,this.tileHeight=(null==i?void 0:i.tileHeight)?i.tileHeight:this.tileWidth,this.position=n}return Object.defineProperty(n.prototype,"content",{get:function(){return this._content},set:function(t){if(this.confirmContentElement(),this._content!==t){if("string"==typeof t)this.contentElement.innerHTML=t;else{for(;this.contentElement.lastElementChild;)this.contentElement.removeChild(this.contentElement.lastElementChild);this.contentElement.appendChild(t)}this._content=t}},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"background",{get:function(){return this._background},set:function(t){t!==this._background&&(this._background=t,this.element.style.backgroundColor=t)},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"color",{get:function(){return this._color},set:function(t){t!==this._color&&(this._color=t,this.element.style.color=t)},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"position",{get:function(){return this._position},set:function(e){this._position=t({},e),this.element.style.left=e.x*this.tileWidth+"px",this.element.style.top=e.y*this.tileHeight+"px"},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"tileWidth",{get:function(){return this._tileWidth},set:function(t){this._tileWidth=t,this.element.style.width=t+"px"},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"tileHeight",{get:function(){return this._tileHeight},set:function(t){this._tileHeight=t,this.element.style.height=t+"px"},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"className",{get:function(){return this.classList.join(" ")},set:function(t){this.classList=t?t.split(" "):[]},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"classList",{get:function(){return function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var i=Array(t),o=0;for(e=0;e<n;e++)for(var r=arguments[e],s=0,a=r.length;s<a;s++,o++)i[o]=r[s];return i}([e],this._classList)},set:function(t){var n,i,o=this;this._classList||(this._classList=[]),t.length===this._classList.length&&t.every((function(t){return o._classList.includes(t)}))&&this._classList.every((function(e){return t.includes(e)}))||(this._classList.length>0&&(n=this.element.classList).remove.apply(n,this._classList),this._classList=t.filter((function(t){return t.trim()&&t!==e})),t.length>0&&(i=this.element.classList).add.apply(i,this.classList))},enumerable:!1,configurable:!0}),n.prototype.setOptions=function(t){var e=t.content,n=void 0===e?"":e,i=t.background,o=void 0===i?"":i,r=t.color,s=void 0===r?"":r,a=t.className,l=void 0===a?"":a,h=t.classList;this.content=n,this.background=o,this.color=s,h?this.classList=h:this.className=l},n.prototype.updateOptions=function(t){var e=t.content,n=t.background,i=t.color,o=t.className,r=t.classList;void 0!==e&&(this.content=e),void 0!==n&&(this.background=n),void 0!==i&&(this.color=i),r&&r.length>0?this.classList=r:void 0!==o&&(this.className=o)},n.prototype.confirmContentElement=function(){this.contentElement||(this.contentElement=document.createElement("div"),this.element.appendChild(this.contentElement))},n}();const i=function(){function t(t){var e=t.target,n=t.width,i=void 0===n?1:n,o=t.height,r=void 0===o?1:o,s=t.tileWidth,a=t.tileHeight;!function(t,e){var n={};for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&e.indexOf(i)<0&&(n[i]=t[i]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(i=Object.getOwnPropertySymbols(t);o<i.length;o++)e.indexOf(i[o])<0&&Object.prototype.propertyIsEnumerable.call(t,i[o])&&(n[i[o]]=t[i[o]])}}(t,["target","width","height","tileWidth","tileHeight"]),this.target=e,this.target.className?this.target.classList.add("pumpkin-container"):this.target.className="pumpkin-container",this.element=document.createElement("div"),this.element.className="pumpkin-display",this.element.setAttribute("aria-hidden","true"),this.dimensions={width:i,height:r},this.tileSize={tileWidth:s||16,tileHeight:a||s||16},this.applyDefaultStyles(),this.target.appendChild(this.element)}return Object.defineProperty(t.prototype,"tileSize",{get:function(){return this._tileSize},set:function(t){var e;this._tileSize=t,this.element.style.fontSize=t.tileHeight+"px",null===(e=this.tiles)||void 0===e||e.forEach((function(e){e.tileWidth=t.tileWidth,e.tileHeight=t.tileHeight,e.position=e.position})),this.resetSize()},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"dimensions",{get:function(){return{width:this._width,height:this._height}},set:function(t){t.width!==this._width&&t.height!==this._height&&(this._width=t.width,this._height=t.height,this.allocateDisplay(),this.resetSize(),this.moveToCenter())},enumerable:!1,configurable:!0}),t.prototype.resetSize=function(){this._width&&this._height&&this.tileSize&&(this.element.style.width=this._width*this.tileSize.tileWidth+"px",this.element.style.height=this._height*this.tileSize.tileHeight+"px")},t.prototype.centerDisplay=function(t,e){this.centerPosition=void 0===t||void 0===e?void 0:{x:t,y:e},this.moveToCenter()},t.prototype.moveToCenter=function(){if(this.centerPosition){var t=(this.centerPosition.x+.5)/this.dimensions.width,e=(this.centerPosition.y+.5)/this.dimensions.height;this.element.style.transform="translate("+100*-t+"%,"+100*-e+"%)"}else this.element.style.transform=""},t.prototype.allocateDisplay=function(){var t=this;this.tiles&&this.tiles.forEach((function(e){t.element.removeChild(e.element)})),this.tiles=[];for(var e=0;e<this._height;e++)for(var i=0;i<this._width;i++){var o=new n({content:""},{x:i,y:e},this.tileSize);this.tiles.push(o),this.element.appendChild(o.element)}},t.prototype.getTile=function(t,e){if(t>=0&&t<this._width&&e>=0&&e<this._height){var n=t+e*this._width;return this.tiles[n]}},t.prototype.formatTileOptions=function(t){return"string"==typeof t||t instanceof HTMLElement?{content:t}:t},t.prototype.setTile=function(t,e,n){var i=this.getTile(t,e);i&&i.setOptions(this.formatTileOptions(n))},t.prototype.updateTile=function(t,e,n){var i=this.getTile(t,e);i&&i.updateOptions(this.formatTileOptions(n))},t.prototype.calculateDimensions=function(t){void 0===t&&(t=this.target.getBoundingClientRect());var e=Math.abs(t.right-t.left),n=Math.abs(t.bottom-t.top);return{width:Math.floor(e/this.tileSize.tileWidth),height:Math.floor(n/this.tileSize.tileHeight)}},t.prototype.calculateTileSize=function(t){void 0===t&&(t=this.target.getBoundingClientRect());var e=Math.abs(t.right-t.left),n=Math.abs(t.bottom-t.top),i={tileWidth:e/this.dimensions.width,tileHeight:n/this.dimensions.height},o=Math.min(i.tileWidth,i.tileHeight);return{tileWidth:o,tileHeight:o}},t.prototype.applyDefaultStyles=function(){var t="pumpkin-default-styles";if(!document.getElementById(t)){var e=document.createElement("style");e.id=t,e.type="text/css",e.appendChild(document.createTextNode("\n.pumpkin-container {\n    position: relative;\n    overflow: hidden;\n    background-color: #000000;\n    color: #ffffff;\n}\n\n.pumpkin-display {\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n}\n\n.pumpkin-tile {\n    position: absolute;\n}\n\n.pumpkin-tile > * {\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n    z-index: 10;\n}\n"));var n=document.head,i=document.querySelector("style, link");n.insertBefore(e,i)}},t}();const o=function(){function t(t){t||(t={});var e=t.type,n=void 0===e?"simple":e;this.type=n,this.queue=[],this.time=0}return t.prototype.add=function(t){var e={};if(t instanceof Function?e.callback=t:"act"in t?e.actor=t:Object.assign(e,t),void 0===e.repeats&&e.actor&&(e.repeats=!0),"complex"===this.type){e.delay||(e.delay=1);var n=e.delay+this.time;if(0===this.queue.length||this.queue[this.queue.length-1].time<=n)this.queue.push({event:e,time:n});else for(var i=0;i<this.queue.length;i++)if(n<this.queue[i].time){this.queue.splice(i,0,{event:e,time:n});break}}else this.queue.push({event:e,time:0})},t.prototype.advance=function(){return t=this,e=void 0,i=function(){var t;return function(t,e){var n,i,o,r,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return r={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function a(r){return function(a){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,i&&(o=2&r[0]?i.return:r[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,r[1])).done)return o;switch(i=0,o&&(r=[2&r[0],o.value]),r[0]){case 0:case 1:o=r;break;case 4:return s.label++,{value:r[1],done:!1};case 5:s.label++,i=r[1],r=[0];continue;case 7:r=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==r[0]&&2!==r[0])){s=0;continue}if(3===r[0]&&(!o||r[1]>o[0]&&r[1]<o[3])){s.label=r[1];break}if(6===r[0]&&s.label<o[1]){s.label=o[1],o=r;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(r);break}o[2]&&s.ops.pop(),s.trys.pop();continue}r=e.call(t,s)}catch(t){r=[6,t],i=0}finally{n=o=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,a])}}}(this,(function(e){switch(e.label){case 0:if(0===this.queue.length)throw new Error("Event queue is empty.");return t=this.queue.shift(),this.time=t.time,"number"==typeof t.event.repeats&&t.event.repeats--,t.event.repeats&&this.add(t.event),t.event.callback?[4,t.event.callback()]:[3,2];case 1:e.sent(),e.label=2;case 2:return t.event.actor?[4,t.event.actor.act()]:[3,4];case 3:e.sent(),e.label=4;case 4:return[2]}}))},new((n=void 0)||(n=Promise))((function(o,r){function s(t){try{l(i.next(t))}catch(t){r(t)}}function a(t){try{l(i.throw(t))}catch(t){r(t)}}function l(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}l((i=i.apply(t,e||[])).next())}));var t,e,n,i},t.prototype.remove=function(t){var e=this,n=[];this.queue.forEach((function(e,i){e.event.actor===t&&n.push(i)})),n.reverse(),n.forEach((function(t){e.queue.splice(t,1)}))},Object.defineProperty(t.prototype,"length",{get:function(){return this.queue.length},enumerable:!1,configurable:!0}),t}(),r=function(){function t(t,e){t||(t=Date.now()),this.seed=Math.floor(t),this.weyl=0,this.x=0,this.base=e||1e5;for(var n=0;n<10;n++)this.getRandom()}return t.prototype.getRandom=function(){return this.x*=this.x,this.x+=this.weyl+=this.seed,this.x=(this.x>>>32|this.x<<32)>>>0,this.x%this.base/this.base},t.prototype.getNumber=function(t,e,n){return void 0===n&&Number.isInteger(t)&&Number.isInteger(e)&&(n=!0),n?Math.floor(this.getRandom()*(e+1-t))+Math.ceil(t):this.getRandom()*(e-t)+t},t.prototype.getRandomElement=function(t){return t[this.getNumber(0,t.length-1,!0)]},t.prototype.getWeightedElement=function(t){var e=0,n=!0;t.forEach((function(t){e+=t.weight,n=n&&Number.isInteger(t.weight)}));for(var i=this.getNumber(n?1:0,e,n),o=0;o<t.length;o++)if((i-=t[o].weight)<=0)return t[o].option;throw new Error("No match found.")},t}();var s=function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var i=Array(t),o=0;for(e=0;e<n;e++)for(var r=arguments[e],s=0,a=r.length;s<a;s++,o++)i[o]=r[s];return i};const a=function(){function t(t){var e=t.canPass,n=t.metric,i=t.maxIterations,o=t.weight;!function(t,e){var n={};for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&e.indexOf(i)<0&&(n[i]=t[i]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(i=Object.getOwnPropertySymbols(t);o<i.length;o++)e.indexOf(i[o])<0&&Object.prototype.propertyIsEnumerable.call(t,i[o])&&(n[i[o]]=t[i[o]])}}(t,["canPass","metric","maxIterations","weight"]),this.canPass=e,n||(n=function(t,e){return Math.abs(e[1]-t[1])+Math.abs(e[0]-t[0])}),o||(o=function(t){return 1}),this.maxIterations=i,this.metric=n,this.weight=o}return t.prototype.findPath=function(t,e,n){var i=this;void 0===n&&(n=!1);for(var o=[],r=this.maxIterations?this.maxIterations:40*this.metric(t,e),a=0,l=[{position:s(t),steps:0,distanceFromGoal:this.metric(t,e),previousLocation:null}],h=[],c=[0,1,1.2];a<r&&!this.contains(l,e);)a++,l.forEach((function(t){for(var o=-1;o<2;o++)for(var r=-1;r<2;r++)if(!n||0===o||0===r){var s=[t.position[0]+o,t.position[1]+r],a=c[Math.abs(o)+Math.abs(r)]*i.weight(s);if(i.canPass(s)){var u=i.getLocation(l,s),p=i.getLocation(h,s);u||p?(u&&u.steps>t.steps+a&&(u.steps=t.steps+a,u.previousLocation=t),p&&p.steps>t.steps+a&&(p.steps=t.steps+a,p.previousLocation=t)):h.push({position:s,steps:t.steps+a,distanceFromGoal:i.metric(s,e),previousLocation:t})}}})),h.sort((function(t,e){return e.steps+e.distanceFromGoal-(t.steps+t.distanceFromGoal)})),l.push(h.pop());var u=this.getLocation(l,e);if(this.contains(l,e))for(a=0;(u.position[0]!==t[0]||u.position[1]!==t[1])&&a<r;)a++,o.push(u.position),u=u.previousLocation;return o.reverse()},t.prototype.isEqual=function(t,e){return t.position[0]===e.position[0]&&t.position[1]===e.position[1]},t.prototype.contains=function(t,e){var n=this;return Array.isArray(e)?t.some((function(t){return t.position[0]===e[0]&&t.position[1]===e[1]})):t.some((function(t){return n.isEqual(t,e)}))},t.prototype.getLocation=function(t,e){for(var n=0,i=t;n<i.length;n++){var o=i[n];if(o.position[0]===e[0]&&o.position[1]===e[1])return o}},t}(),l=function(){function t(t,e){this.canSee=t,this.range=e||8}return t.prototype.look=function(t,e){var n=e||this.range;this.canSee(t);for(var i=[],o=[],r=0,s=0,a=1;a<=n;a++){for(var l=0;l<4;l++)for(var h=-a;h<=a;h++){0===l?(r=h,s=a):1===l?(s=h,r=a):2===l?(r=h,s=-a):(s=h,r=-a);var c=[t[0]+r,t[1]+s];if(!(this.distance(t,c)>n)){var u=this.angleTo(t,c),p=this.angularSize(t,c)/2,f=!1;this.isInShadows(u,i)&&this.isInShadows(u+p,i)&&this.isInShadows(u-p,i)&&(f=!0),!f&&this.canSee(c)||o.push({startAngle:u-p,endAngle:u+p})}}for(;o.length>0;)this.combineShadow(i,o.pop());if(1===i.length&&i[0].endAngle-i[0].startAngle>=360)return}},t.prototype.angleTo=function(t,e){var n=e[1]-t[1],i=e[0]-t[0],o=180*Math.atan2(n,i)/Math.PI;return o>=0?o:o+360},t.prototype.angularSize=function(t,e){var n=this.distance(t,e);return 360*Math.atan(1/(2*n))/Math.PI},t.prototype.distance=function(t,e){return Math.sqrt(Math.pow(e[1]-t[1],2)+Math.pow(e[0]-t[0],2))},t.prototype.isInShadows=function(t,e){for(var n=t-360,i=0,o=e;i<o.length;i++){var r=o[i];if(t<=r.endAngle&&t>=r.startAngle||n<=r.endAngle&&n>=r.startAngle)return!0}return!1},t.prototype.combineShadow=function(t,e){for(var n=[],i=0;i<t.length;i++){var o=t[i];e.startAngle<o.endAngle&&e.endAngle>o.startAngle&&(e.startAngle=Math.min(o.startAngle,e.startAngle),e.endAngle=Math.max(o.endAngle,e.endAngle),n.push(i))}if(n.length>0){var r=t[n.shift()];for(r.startAngle=e.startAngle,r.endAngle=e.endAngle,i=n.length-1;i>=0;i--)t.splice(n[i],1)}else t.push(e)},t}();const h=function(){function t(t){this.contents=t.map((function(t){return function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var i=Array(t),o=0;for(e=0;e<n;e++)for(var r=arguments[e],s=0,a=r.length;s<a;s++,o++)i[o]=r[s];return i}(t)}))}return t.prototype.equals=function(t){return this.compatible(t,0,0)},t.prototype.compatible=function(t,e,n){return this.contents.every((function(i,o){return i.every((function(i,r){var s=r+e,a=o+n;return!(s>=0&&a>=0&&a<t.contents.length&&s<t.contents[a].length)||i===t.contents[a][s]}))}))},t.prototype.constrain=function(t,e,n){return!(n>=0&&n<this.contents.length&&e>=0&&e<this.contents[n].length)||this.contents[n][e]===t},t}();var c=function(t,e){var n={};for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&e.indexOf(i)<0&&(n[i]=t[i]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(i=Object.getOwnPropertySymbols(t);o<i.length;o++)e.indexOf(i[o])<0&&Object.prototype.propertyIsEnumerable.call(t,i[o])&&(n[i[o]]=t[i[o]])}return n};const u=function(){function t(t){var e,n=t.input,i=t.n,o=void 0===i?1:i,s=t.m,a=void 0===s?o:s,l=t.repeatInput,h=void 0!==l&&l,u=t.random,p=(c(t,["input","n","m","repeatInput","random"]),n.map((function(t){return"string"==typeof t?t.split(""):t})));e=this.processInput(p,h,o,a),this.rules=e[0],this.frequencies=e[1],this.n=o,this.m=a,this.random=u||new r}return t.prototype.processInput=function(t,e,n,i){for(var o=t.length,r=o-(e?0:i-1),s=Math.min.apply(Math,t.map((function(t){return t.length}))),a=s-(e?0:n-1),l=[],c=0;c<a;c++)for(var u=0;u<r;u++){for(var p=[],f=0;f<i;f++){for(var d=[],g=(u+f)%o,m=0;m<n;m++){var v=(m+c)%s;d.push(t[g][v])}p.push(d)}var y=new h(p);l.push(y)}var b=[],w=[];return l.forEach((function(t){var e=b.findIndex((function(e){return e.equals(t)}));e>=0?w[e].weight++:(b.push(t),w.push({option:t,weight:1}))})),[b.map((function(t){var e={up:[],down:[],left:[],right:[]};return b.forEach((function(n,i){t.compatible(n,-1,0)&&e.right.push(i),t.compatible(n,1,0)&&e.left.push(i),t.compatible(n,0,-1)&&e.down.push(i),t.compatible(n,0,1)&&e.up.push(i)})),e})),w]},t.prototype.generate=function(t){for(var e=t.width,n=t.height,i=t.repeatOutput,o=(c(t,["width","height","repeatOutput"]),[]),r=[],s=[],a=0;a<n;a++){for(var l=[],h=0;h<e;h++){for(var u=[],p=0;p<this.frequencies.length;p++)for(var f=0;f<this.frequencies[p].weight;f++)u.push(p);var d={options:u,position:[h,a]};l.push(d),r.push(d)}o.push(l)}for(var g=e*n+1;r.length>0&&g>=0;){if(r.sort((function(t,e){return t.options.length-e.options.length})),(d=r.shift()).options.length<=0)return null;var m=[this.random.getRandomElement(d.options)];d.options=m,s.push(d),this.applyAdjacency(o,d.position,i),g--}return this.postProcess(o)},t.prototype.postProcess=function(t){for(var e=this,n=t.length+(this.m-1),i=t.length+(this.n-1),o=[],r=0;r<n;r++){for(var s=[],a=0;a<i;a++)s.push(null);o.push(s)}return t.forEach((function(t,n){t.forEach((function(t,i){if(t.options.length>0)for(var r=e.frequencies[t.options[0]].option,s=0;s<e.n;s++)for(var a=0;a<e.m;a++)o[n+a][i+s]=r.contents[a][s]}))})),o},t.prototype.applyAdjacency=function(t,e,n,i){var o=e[0];void 0===i&&(i=!1);for(var r=[t[e[1]][o]],s=[];r.length>0;){var a=r.pop();this.propogate(t,a.position,n,s).forEach((function(t){r.push(t)})),i||s.push(a)}},t.prototype.propogate=function(t,e,n,i){var o=this,r=e[0],s=e[1];void 0===i&&(i=[]);var a=t[s][r],l={up:[],down:[],left:[],right:[]};a.options.forEach((function(t){var e=o.rules[t];e.up.forEach((function(t){return l.up.push(t)})),e.down.forEach((function(t){return l.down.push(t)})),e.left.forEach((function(t){return l.left.push(t)})),e.right.forEach((function(t){return l.right.push(t)}))})),l.up=l.up.filter((function(t,e,n){return n.indexOf(t)===e})),l.down=l.down.filter((function(t,e,n){return n.indexOf(t)===e})),l.left=l.left.filter((function(t,e,n){return n.indexOf(t)===e})),l.right=l.right.filter((function(t,e,n){return n.indexOf(t)===e}));var h=[],c={up:[0,-1],down:[0,1],left:[-1,0],right:[1,0]};return["up","down","left","right"].forEach((function(e){var o=r+c[e][0],a=s+c[e][1];if(n&&(o+=t[0].length,o%=t[0].length,a+=t.length,a%=t.length),o>=0&&o<t[0].length&&a>=0&&a<t.length){if(i.includes(t[a][o]))return;var u=t[a][o].options.length;t[a][o].options=t[a][o].options.filter((function(t){return l[e].includes(t)})),u>t[a][o].options.length&&h.push(t[a][o])}})),h},t}(),p={target:document.getElementById("displayExample"),width:20,height:15},f=new i(p);f.tileSize=f.calculateTileSize(),window.addEventListener("resize",(()=>{f.tileSize=f.calculateTileSize()}));for(let t=0;t<p.width;t++)for(let e=0;e<p.height;e++)0===t||0===e||t===p.width-1||e===p.height-1?f.setTile(t,e,{content:"#",className:"brickWall"}):3===t&&5===e?f.setTile(t,e,{content:"@",classList:["player"]}):f.setTile(t,e,{content:".",className:"coolFloor"});for(let t=5;t<10;t++)f.updateTile(t,t,{className:"superAwesome"});const d=()=>{const t=Math.floor(Date.now()),e=new r(t),n=e.getRandom(),i=e.getNumber(0,10),o=e.getNumber(0,10,!1),s=e.getRandomElement([1,2,3,4,5,6,7]),a=e.getWeightedElement([{weight:10,option:"Cute dog"},{weight:15,option:"Awesome cat"},{weight:1,option:"Rare Franklin"}]),l=document.getElementById("randomResults");for(;l.lastChild;)l.removeChild(l.lastChild);const h=function(t,e){const n=document.createElement("li"),i=`${t} : ${e}`;n.appendChild(document.createTextNode(i)),l.appendChild(n)};h("x",n.toString()),h("y",i.toString()),h("noThanksNotInteger",o.toString()),h("randomElement",s.toString()),h("randomWeightedElement",a.toString())};d(),document.getElementById("randomButton").addEventListener("click",d);const g=new i({target:document.querySelector(".colorDisplay"),width:10,height:10});for(let t=0;t<10;t++)for(let e=0;e<10;e++)0===t||0===e||9===t||9===e?g.setTile(t,e,"#"):3===t&&3===e?g.setTile(t,e,"@"):4===t&&5===e?g.setTile(t,e,{content:"g",color:"green",background:"rgba(128,0,0,0.2)"}):g.setTile(t,e,".");g.tileSize=g.calculateTileSize(),g.centerDisplay(3,3);const m=["####################","#..................#","#..#.....#....#....#","#..#.....###...##..#","#..#.....#.........#","#.............####.#","#........#....#....#","####...###....#....#","#........#....#....#","####################"],v=m[0].length,y=m.length,b=new i({target:document.getElementById("fovMap"),width:v,height:y});b.tileSize=b.calculateTileSize();const w=new l((t=>{const e=t[0],n=t[1];if(e<0||e>=v||n<0||n>=y)return!1;const i=m[n][e];return b.setTile(e,n,i),"#"!==i}),20),E=[5,5],O=m[E[1]];m[E[1]]=O.slice(0,E[0])+"@"+O.slice(E[0]+1),w.look(E);const S=document.getElementById("simpleEventList"),x=document.getElementById("complexEventList"),T=(t,e)=>{const n=document.createElement("li");n.appendChild(document.createTextNode(t)),e.appendChild(n)},k=new o({type:"simple"}),L={act:()=>T("The Goblin goblins!",S)},_={act:()=>T("The cat meows!",S)};k.add(L),k.add(_),k.add({callback:()=>T("Drip drip goes the faucet.",S),repeats:!0}),k.add({callback:()=>T("Rushing wind! Oh no!",S),repeats:2}),k.add({callback:()=>T("The house of cards falls over. Whoops!",S)});for(let t=0;t<20;t++)k.advance();const z=new o({type:"complex"}),P={act:()=>T("Fast cat nyooms!",x)},I={act:()=>T("Slow ogre is sloooow",x)};z.add({actor:P,delay:1}),z.add({actor:I,delay:5}),z.add({callback:()=>T("The mail has just arrived. Sweet!",x),delay:16});for(let t=0;t<20;t++)z.advance();m[E[1]]=O.slice(0,E[0])+"."+O.slice(E[0]+1);const j=new i({target:document.getElementById("pathDisplay"),width:v,height:y});j.tileSize=j.calculateTileSize(),m.forEach(((t,e)=>t.split("").forEach(((t,n)=>{j.setTile(n,e,t)}))));const A=[1,8];new a({canPass:([t,e])=>!(t<0||t>=v||e<0||e>=y)&&"#"!==m[e][t]}).findPath(A,[15,8],!1).forEach((([t,e])=>{j.updateTile(t,e,{content:"X",className:"pathMarker"})})),j.updateTile(A[0],A[1],"@"),window.addEventListener("resize",(()=>{g.tileSize=g.calculateTileSize(),b.tileSize=b.calculateTileSize(),j.tileSize=j.calculateTileSize()}));const M=new i({target:document.getElementById("wfcDisplay"),width:20,height:20});M.tileSize=M.calculateTileSize(),new u({input:[".#..",".#..","####",".#.."],n:3,repeatInput:!0}).generate({width:20,height:20,repeatOutput:!0}).forEach(((t,e)=>{t.forEach(((t,n)=>{M.setTile(n,e,t)}))}));const N=new i({target:document.getElementById("wfcDisplayTwo"),width:20,height:20});N.tileSize=N.calculateTileSize(),new u({input:["                 ","             X   ","    X#       #   ","     #       #   ","     #  X    #   ","     #########   ","     #     #     ","     #     X     ","     X           ","                 "],n:3,repeatInput:!0}).generate({width:20,height:20,repeatOutput:!0}).forEach(((t,e)=>{t.forEach(((t,n)=>{N.setTile(n,e,t)}))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yb2d1ZWxpa2UtcHVtcGtpbi1wYXRjaC8uL2xpYi9kaXNwbGF5L1RpbGUuanMiLCJ3ZWJwYWNrOi8vcm9ndWVsaWtlLXB1bXBraW4tcGF0Y2gvLi9saWIvZGlzcGxheS9EaXNwbGF5LmpzIiwid2VicGFjazovL3JvZ3VlbGlrZS1wdW1wa2luLXBhdGNoLy4vbGliL2Rpc3BsYXkvRGlzcGxheVN0eWxlLmpzIiwid2VicGFjazovL3JvZ3VlbGlrZS1wdW1wa2luLXBhdGNoLy4vbGliL2V2ZW50L0V2ZW50TWFuYWdlci5qcyIsIndlYnBhY2s6Ly9yb2d1ZWxpa2UtcHVtcGtpbi1wYXRjaC8uL2xpYi9yYW5kb20vUmFuZG9tLmpzIiwid2VicGFjazovL3JvZ3VlbGlrZS1wdW1wa2luLXBhdGNoLy4vbGliL3BhdGhmaW5kZXIvUGF0aEZpbmRlci5qcyIsIndlYnBhY2s6Ly9yb2d1ZWxpa2UtcHVtcGtpbi1wYXRjaC8uL2xpYi9mb3YvRk9WLmpzIiwid2VicGFjazovL3JvZ3VlbGlrZS1wdW1wa2luLXBhdGNoLy4vbGliL3dmYy9XZmNUaWxlLmpzIiwid2VicGFjazovL3JvZ3VlbGlrZS1wdW1wa2luLXBhdGNoLy4vbGliL3dmYy9XRkMuanMiLCJ3ZWJwYWNrOi8vcm9ndWVsaWtlLXB1bXBraW4tcGF0Y2gvLi9kb2NzL3NjcmlwdC5qcyJdLCJuYW1lcyI6WyJfX2Fzc2lnbiIsIk9iamVjdCIsImFzc2lnbiIsInQiLCJzIiwiaSIsIm4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJwIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiYXBwbHkiLCJ0aGlzIiwiYmFzZUNsYXNzTmFtZSIsIlRpbGUiLCJ0aWxlT3B0aW9ucyIsInBvc2l0aW9uIiwidGlsZVNpemUiLCJlbGVtZW50IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwiX2EiLCJjb250ZW50IiwiX2IiLCJjb2xvciIsIl9jIiwiYmFja2dyb3VuZCIsIl9kIiwiY2xhc3NOYW1lIiwiX2UiLCJlIiwiaW5kZXhPZiIsImdldE93blByb3BlcnR5U3ltYm9scyIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiX19yZXN0IiwidGlsZVdpZHRoIiwidGlsZUhlaWdodCIsImRlZmluZVByb3BlcnR5IiwiZ2V0IiwiX2NvbnRlbnQiLCJzZXQiLCJuZXdDb250ZW50IiwiY29uZmlybUNvbnRlbnRFbGVtZW50IiwiY29udGVudEVsZW1lbnQiLCJpbm5lckhUTUwiLCJsYXN0RWxlbWVudENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJhcHBlbmRDaGlsZCIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJfYmFja2dyb3VuZCIsIm5ld0JhY2tncm91bmQiLCJzdHlsZSIsImJhY2tncm91bmRDb2xvciIsIl9jb2xvciIsIm5ld2NvbG9yIiwiX3Bvc2l0aW9uIiwibGVmdCIsIngiLCJ0b3AiLCJ5IiwiX3RpbGVXaWR0aCIsIm5ld1dpZHRoIiwid2lkdGgiLCJfdGlsZUhlaWdodCIsIm5ld0hlaWdodCIsImhlaWdodCIsImpvaW4iLCJuZXdDbGFzcyIsInNwbGl0IiwiaWwiLCJyIiwiQXJyYXkiLCJrIiwiYSIsImoiLCJqbCIsIl9fc3ByZWFkQXJyYXlzIiwiX2NsYXNzTGlzdCIsIm5ld0NsYXNzTGlzdCIsIl90aGlzIiwiZXZlcnkiLCJuYW1lIiwiaW5jbHVkZXMiLCJyZW1vdmUiLCJmaWx0ZXIiLCJ0cmltIiwic2V0T3B0aW9ucyIsIm5ld09wdGlvbnMiLCJ1cGRhdGVPcHRpb25zIiwiRGlzcGxheSIsInBhcmFtZXRlcnMiLCJ0YXJnZXQiLCJzZXRBdHRyaWJ1dGUiLCJkaW1lbnNpb25zIiwiYXBwbHlEZWZhdWx0U3R5bGVzIiwiX3RpbGVTaXplIiwibmV3VGlsZVNpemUiLCJmb250U2l6ZSIsInRpbGVzIiwiZm9yRWFjaCIsInRpbGUiLCJyZXNldFNpemUiLCJfd2lkdGgiLCJfaGVpZ2h0IiwibmV3RGltZW5zaW9ucyIsImFsbG9jYXRlRGlzcGxheSIsIm1vdmVUb0NlbnRlciIsImNlbnRlckRpc3BsYXkiLCJjZW50ZXJQb3NpdGlvbiIsInVuZGVmaW5lZCIsInhQZXJjZW50IiwieVBlcmNlbnQiLCJ0cmFuc2Zvcm0iLCJuZXdUaWxlIiwicHVzaCIsImdldFRpbGUiLCJpbmRleCIsImZvcm1hdFRpbGVPcHRpb25zIiwiaW5wdXQiLCJIVE1MRWxlbWVudCIsInNldFRpbGUiLCJ1cGRhdGVUaWxlIiwiY2FsY3VsYXRlRGltZW5zaW9ucyIsImNsaWVudFJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJjbGllbnRXaWR0aCIsIk1hdGgiLCJhYnMiLCJyaWdodCIsImNsaWVudEhlaWdodCIsImJvdHRvbSIsImZsb29yIiwiY2FsY3VsYXRlVGlsZVNpemUiLCJzaXplIiwibWF4VGlsZVNpemUiLCJtaW4iLCJzdHlsZXNJZCIsImdldEVsZW1lbnRCeUlkIiwic3R5bGVzIiwiaWQiLCJ0eXBlIiwiY3JlYXRlVGV4dE5vZGUiLCJoZWFkIiwiZmlyc3RTdHlsZSIsInF1ZXJ5U2VsZWN0b3IiLCJpbnNlcnRCZWZvcmUiLCJFdmVudE1hbmFnZXIiLCJxdWV1ZSIsInRpbWUiLCJhZGRlZEV2ZW50IiwiZXZlbnQiLCJGdW5jdGlvbiIsImNhbGxiYWNrIiwiYWN0b3IiLCJyZXBlYXRzIiwiZGVsYXkiLCJzY2hlZHVsZUZvciIsInNwbGljZSIsImFkdmFuY2UiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsImdlbmVyYXRvciIsInRoaXNFdmVudCIsImJvZHkiLCJmIiwiZyIsIl8iLCJsYWJlbCIsInNlbnQiLCJ0cnlzIiwib3BzIiwibmV4dCIsInZlcmIiLCJTeW1ib2wiLCJpdGVyYXRvciIsInYiLCJvcCIsIlR5cGVFcnJvciIsImRvbmUiLCJ2YWx1ZSIsInBvcCIsInN0ZXAiLCJfX2dlbmVyYXRvciIsIkVycm9yIiwic2hpZnQiLCJhY3QiLCJQIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJyZWplY3RlZCIsInJlc3VsdCIsInRoZW4iLCJtYXRjaGVzIiwicmV2ZXJzZSIsIm1hdGNoIiwiUmFuZG9tIiwic2VlZCIsImJhc2UiLCJEYXRlIiwibm93Iiwid2V5bCIsImdldFJhbmRvbSIsImdldE51bWJlciIsIm1heCIsImludGVnZXIiLCJOdW1iZXIiLCJpc0ludGVnZXIiLCJjZWlsIiwiZ2V0UmFuZG9tRWxlbWVudCIsImFycmF5IiwiZ2V0V2VpZ2h0ZWRFbGVtZW50IiwidG90YWxXZWlnaHQiLCJ3ZWlnaHQiLCJyYW5kb21OdW1iZXIiLCJvcHRpb24iLCJQYXRoRmluZGVyIiwiY2FuUGFzcyIsIm1ldHJpYyIsIm1heEl0ZXJhdGlvbnMiLCJwb3NpdGlvbjEiLCJwb3NpdGlvbjIiLCJmaW5kUGF0aCIsInN0YXJ0UG9zaXRpb24iLCJlbmRQb3NpdGlvbiIsIm9ydGhvZ29uYWxPbmx5Iiwicm91dGUiLCJpdGVyYXRpb25zIiwiY2xvc2VkTGlzdCIsInN0ZXBzIiwiZGlzdGFuY2VGcm9tR29hbCIsInByZXZpb3VzTG9jYXRpb24iLCJvcGVuTGlzdCIsInN0ZXBTaXplQXJyIiwiY29udGFpbnMiLCJsb2NhdGlvbiIsIm5ld1Bvc2l0aW9uIiwic3RlcFNpemUiLCJpbkNsb3NlZExpc3RBbHJlYWR5IiwiZ2V0TG9jYXRpb24iLCJpbk9wZW5MaXN0QWxyZWFkeSIsInNvcnQiLCJiIiwiaXNFcXVhbCIsImxvY2F0aW9uTGlzdCIsInRlc3RMb2NhdGlvbiIsImlzQXJyYXkiLCJzb21lIiwidGVzdFBvc2l0aW9uIiwiX2kiLCJsb2NhdGlvbkxpc3RfMSIsImxvY2F0aW9uXzEiLCJGT1YiLCJjYW5TZWUiLCJyYW5nZSIsImxvb2siLCJsb29rUmFuZ2VPdmVycmlkZSIsInNoYWRvd3MiLCJuZXdTaGFkb3dzIiwiZGlzdGFuY2UiLCJzaWRlIiwiZWRnZSIsImxvb2tQb3MiLCJhbmdsZVRvIiwiYW5ndWxhclNpemUiLCJpblNoYWRvd3MiLCJpc0luU2hhZG93cyIsInN0YXJ0QW5nbGUiLCJlbmRBbmdsZSIsImNvbWJpbmVTaGFkb3ciLCJhbmdsZSIsImF0YW4yIiwiUEkiLCJhdGFuIiwic3FydCIsInBvdyIsIm5lZ0FuZ2xlIiwic2hhZG93c18xIiwic2hhZG93IiwibmV3U2hhZG93Iiwib3ZlckxhcEFyciIsIm1haW5TaGFkb3ciLCJXZmNUaWxlIiwiY29udGVudHMiLCJtYXAiLCJyb3ciLCJlcXVhbHMiLCJjb21wYXRpYmxlIiwidmFsIiwieFBvcyIsInlQb3MiLCJjb25zdHJhaW4iLCJjb25zdHJhaW50IiwiV0ZDIiwicGFyYW1zIiwibSIsInJlcGVhdElucHV0IiwicmFuZG9tIiwiaW5wdXRJbWFnZSIsInByb2Nlc3NJbnB1dCIsInJ1bGVzIiwiZnJlcXVlbmNpZXMiLCJoZWlnaHRUaWxlcyIsIndpZHRoVGlsZXMiLCJyYXdUaWxlcyIsInRpbGVJbnB1dCIsImZpbmRJbmRleCIsIm90aGVyVGlsZSIsInJ1bGUiLCJ1cCIsImRvd24iLCJnZW5lcmF0ZSIsInJlcGVhdE91dHB1dCIsIndhdmVGdW5jdGlvbiIsImVudHJvcHlMaXN0IiwiZG9uZUxpc3QiLCJjb2x1bW4iLCJudW0iLCJjb3VudCIsIm9wdGlvbnMiLCJjYXAiLCJjaG9pY2UiLCJhcHBseUFkamFjZW5jeSIsInBvc3RQcm9jZXNzIiwib3V0cHV0IiwiYmFja1RyYWNrIiwidG9Eb1RpbGVzIiwiZG9uZVRpbGVzIiwiZG9UaWxlIiwicHJvcG9nYXRlIiwiaWdub3JlTGlzdCIsImFnZ3JlZ2F0ZVJ1bGVzIiwiYXJyIiwibmV4dFRpbGVzIiwic3RlcERpcmVjdGlvbnMiLCJ4eCIsInl5IiwiYmVmb3JlTGVuZ3RoIiwiZGlzcGxheSIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJyYW5kb21TdHVmZiIsIm9wdGlvbmFsU2VlZCIsIm5vVGhhbmtzTm90SW50ZWdlciIsInJhbmRvbUVsZW1lbnQiLCJyYW5kb21XZWlnaHRlZEVsZW1lbnQiLCJyZXN1bHRzTGlzdCIsImxhc3RDaGlsZCIsImF0dGFjaFJlc3VsdCIsImxpIiwidGV4dCIsInRvU3RyaW5nIiwiY29sb3JEaXNwbGF5IiwiZm92RGlzcGxheSIsImZvdiIsInBsYXllclBvcyIsIm1hcFJvdyIsInNsaWNlIiwic2ltcGxlTGlzdCIsImNvbXBsZXhMaXN0Iiwic2hvd0FjdGlvbiIsImFjdGlvbiIsImxpc3QiLCJsaXN0SXRlbSIsInNpbXBsZUV2ZW50cyIsInNpbXBsZUdvYmxpbiIsInNpbXBsZUNhdCIsImNvbXBsZXhFdmVudHMiLCJmYXN0Q2F0Iiwic2xvd09ncmUiLCJwYXRoRGlzcGxheSIsInN0YXJ0UG9zIiwid2ZjRGlzcGxheSIsImNvbCIsIndmY0Rpc3BsYXlUd28iXSwibWFwcGluZ3MiOiJtQkFBQSxJQUFJQSxFQUFzQyxXQVN0QyxPQVJBQSxFQUFXQyxPQUFPQyxRQUFVLFNBQVNDLEdBQ2pDLElBQUssSUFBSUMsRUFBR0MsRUFBSSxFQUFHQyxFQUFJQyxVQUFVQyxPQUFRSCxFQUFJQyxFQUFHRCxJQUU1QyxJQUFLLElBQUlJLEtBRFRMLEVBQUlHLFVBQVVGLEdBQ09KLE9BQU9TLFVBQVVDLGVBQWVDLEtBQUtSLEVBQUdLLEtBQ3pETixFQUFFTSxHQUFLTCxFQUFFSyxJQUVqQixPQUFPTixJQUVLVSxNQUFNQyxLQUFNUCxZQW9CNUJRLEVBQWdCLGVBNk1wQixRQTNNMEIsV0FDdEIsU0FBU0MsRUFBS0MsRUFBYUMsRUFBVUMsR0FFakNMLEtBQUtNLFFBQVVDLFNBQVNDLGNBQWMsT0FDdENSLEtBQUtNLFFBQVFHLFVBQVVDLElBQUlULEdBRTNCLElBQUlVLEVBQUtSLEVBQVlTLFFBQVNBLE9BQWlCLElBQVBELEVBQWdCLEdBQUtBLEVBQUlFLEVBQUtWLEVBQVlXLE1BQU9BLE9BQWUsSUFBUEQsRUFBZ0IsR0FBS0EsRUFBSUUsRUFBS1osRUFBWWEsV0FBWUEsT0FBb0IsSUFBUEQsRUFBZ0IsR0FBS0EsRUFBSUUsRUFBS2QsRUFBWWUsVUFBV0EsT0FBbUIsSUFBUEQsRUFBZ0IsR0FBS0EsRUFBSUUsRUFBS2hCLEVBQVlNLFVBQVdBLE9BQW1CLElBQVBVLEVBQWdCLEdBQUtBLEdBMUI3UixTQUFVN0IsRUFBRzhCLEdBQy9DLElBQUkvQixFQUFJ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RUFMRSxDQUNyQjFSLE9BQVEzRSxTQUFTeUgsZUFBZSxjQUNoQzNFLE1BQU8sR0FDUEcsT0FBUSxLQUdab1QsRUFBV3ZXLFNBQVd1VyxFQUFXalAsb0JBVXJCLElBQUksRUFBSSxDQUFDZCxNQVBGLENBQ2YsT0FDQSxPQUNBLE9BQ0EsUUFHa0NySCxFQUFFLEVBQUV3UyxhQUFZLElBQ25DZSxTQUFTLENBQUMxUCxNQUFNLEdBQUdHLE9BQU8sR0FBR3dQLGNBQWEsSUFFdER0TixTQUFRLENBQUMyTCxFQUFJcE4sS0FDaEJvTixFQUFJM0wsU0FBUSxDQUFDbVIsRUFBSXRYLEtBQ2JxWCxFQUFXN1AsUUFBUXhILEVBQUUwRSxFQUFFNFMsU0FJL0IsTUFLTUMsRUFBZ0IsSUFBSSxFQUxFLENBQ3hCNVIsT0FBUTNFLFNBQVN5SCxlQUFlLGlCQUNoQzNFLE1BQU8sR0FDUEcsT0FBUSxLQUdac1QsRUFBY3pXLFNBQVd5VyxFQUFjblAsb0JBZ0J4QixJQUFJLEVBQUksQ0FBQ2QsTUFiRixDQUNsQixvQkFDQSxvQkFDQSxvQkFDQSxvQkFDQSxvQkFDQSxvQkFDQSxvQkFDQSxvQkFDQSxvQkFDQSxxQkFHd0NySCxFQUFFLEVBQUV3UyxhQUFZLElBQ25DZSxTQUFTLENBQUMxUCxNQUFNLEdBQUdHLE9BQU8sR0FBR3dQLGNBQWEsSUFFekR0TixTQUFRLENBQUMyTCxFQUFJcE4sS0FDbkJvTixFQUFJM0wsU0FBUSxDQUFDbVIsRUFBSXRYLEtBQ2J1WCxFQUFjL1AsUUFBUXhILEVBQUUwRSxFQUFFNFMsVSIsImZpbGUiOiJzY3JpcHRidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXHJcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn07XHJcbnZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcclxuICAgIHZhciB0ID0ge307XHJcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcclxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59O1xyXG52YXIgX19zcHJlYWRBcnJheXMgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXlzKSB8fCBmdW5jdGlvbiAoKSB7XHJcbiAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcclxuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcclxuICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcclxuICAgICAgICAgICAgcltrXSA9IGFbal07XHJcbiAgICByZXR1cm4gcjtcclxufTtcclxudmFyIGJhc2VDbGFzc05hbWUgPSBcInB1bXBraW4tdGlsZVwiO1xyXG4vKiogQ2xhc3MgdG8ga2VlcCB0cmFjayBvZiBlYWNoIGluZGl2aWR1YWwgdGlsZSBpbiB0aGUgZGlzcGxheSAqL1xyXG52YXIgVGlsZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFRpbGUodGlsZU9wdGlvbnMsIHBvc2l0aW9uLCB0aWxlU2l6ZSkge1xyXG4gICAgICAgIC8vIENyZWF0ZSBuZWNlc3NhcnkgZWxlbWVudHMgYW5kIGFwcGx5IGNsYXNzZXNcclxuICAgICAgICB0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChiYXNlQ2xhc3NOYW1lKTtcclxuICAgICAgICAvLyBTZXQgdGlsZSBjb250ZW50IGFuZCBjb2xvdXIgc2NoZW1lXHJcbiAgICAgICAgdmFyIF9hID0gdGlsZU9wdGlvbnMuY29udGVudCwgY29udGVudCA9IF9hID09PSB2b2lkIDAgPyAnJyA6IF9hLCBfYiA9IHRpbGVPcHRpb25zLmNvbG9yLCBjb2xvciA9IF9iID09PSB2b2lkIDAgPyAnJyA6IF9iLCBfYyA9IHRpbGVPcHRpb25zLmJhY2tncm91bmQsIGJhY2tncm91bmQgPSBfYyA9PT0gdm9pZCAwID8gJycgOiBfYywgX2QgPSB0aWxlT3B0aW9ucy5jbGFzc05hbWUsIGNsYXNzTmFtZSA9IF9kID09PSB2b2lkIDAgPyAnJyA6IF9kLCBfZSA9IHRpbGVPcHRpb25zLmNsYXNzTGlzdCwgY2xhc3NMaXN0ID0gX2UgPT09IHZvaWQgMCA/IFtdIDogX2UsIHJlc3QgPSBfX3Jlc3QodGlsZU9wdGlvbnMsIFtcImNvbnRlbnRcIiwgXCJjb2xvclwiLCBcImJhY2tncm91bmRcIiwgXCJjbGFzc05hbWVcIiwgXCJjbGFzc0xpc3RcIl0pO1xyXG4gICAgICAgIHRoaXMuY29udGVudCA9IGNvbnRlbnQ7XHJcbiAgICAgICAgdGhpcy5jb2xvciA9IGNvbG9yO1xyXG4gICAgICAgIHRoaXMuYmFja2dyb3VuZCA9IGJhY2tncm91bmQ7XHJcbiAgICAgICAgaWYgKGNsYXNzTGlzdC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xhc3NMaXN0ID0gY2xhc3NMaXN0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5jbGFzc05hbWUgPSBjbGFzc05hbWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFNldCB0aGUgdGlsZSBzaXplXHJcbiAgICAgICAgdGhpcy50aWxlV2lkdGggPSAodGlsZVNpemUgPT09IG51bGwgfHwgdGlsZVNpemUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRpbGVTaXplLnRpbGVXaWR0aCkgPyB0aWxlU2l6ZS50aWxlV2lkdGggOiAxNjtcclxuICAgICAgICB0aGlzLnRpbGVIZWlnaHQgPSAodGlsZVNpemUgPT09IG51bGwgfHwgdGlsZVNpemUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRpbGVTaXplLnRpbGVIZWlnaHQpID8gdGlsZVNpemUudGlsZUhlaWdodCA6IHRoaXMudGlsZVdpZHRoO1xyXG4gICAgICAgIC8vIFNldCB0aGUgdGlsZSBwb3NpdGlvblxyXG4gICAgICAgIHRoaXMucG9zaXRpb24gPSBwb3NpdGlvbjtcclxuICAgIH1cclxuICAgIDtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUaWxlLnByb3RvdHlwZSwgXCJjb250ZW50XCIsIHtcclxuICAgICAgICAvKiogR2V0IG9yIHNldCB0aGUgdGlsZSBjb250ZW50cyAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY29udGVudDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKG5ld0NvbnRlbnQpIHtcclxuICAgICAgICAgICAgLy8gQ3JlYXRlIGNvbnRlbnRFbGVtZW50IGlmIGl0IGRvZXNuJ3QgYWxyZWFkeSBleGlzdFxyXG4gICAgICAgICAgICB0aGlzLmNvbmZpcm1Db250ZW50RWxlbWVudCgpO1xyXG4gICAgICAgICAgICAvLyBPbmx5IHVwZGF0ZSBpZiB0aGUgbmV3IGFuZCBvbGQgY29udGVudCBkb24ndCBtYXRjaFxyXG4gICAgICAgICAgICBpZiAodGhpcy5fY29udGVudCAhPT0gbmV3Q29udGVudCkge1xyXG4gICAgICAgICAgICAgICAgLy8gSWYgY29udGVudCBpcyBhIHN0cmluZywganVzdCBhZGQgaXRcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnRFbGVtZW50LmlubmVySFRNTCA9IG5ld0NvbnRlbnQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBJZiBpdCBpcyBhbiBlbGVtZW50LCBlbXB0eSB0aGUgdGlsZSBhbmQgYXBwZW5kIHRoZSBuZXcgY29udGVudFxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHRoaXMuY29udGVudEVsZW1lbnQubGFzdEVsZW1lbnRDaGlsZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnRFbGVtZW50LnJlbW92ZUNoaWxkKHRoaXMuY29udGVudEVsZW1lbnQubGFzdEVsZW1lbnRDaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGVudEVsZW1lbnQuYXBwZW5kQ2hpbGQobmV3Q29udGVudCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jb250ZW50ID0gbmV3Q29udGVudDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUaWxlLnByb3RvdHlwZSwgXCJiYWNrZ3JvdW5kXCIsIHtcclxuICAgICAgICAvKiogR2V0IG9yIHNldCB0aGUgYmFja2dyb3VuZCBjb2xvdXIgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2JhY2tncm91bmQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChuZXdCYWNrZ3JvdW5kKSB7XHJcbiAgICAgICAgICAgIGlmIChuZXdCYWNrZ3JvdW5kICE9PSB0aGlzLl9iYWNrZ3JvdW5kKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9iYWNrZ3JvdW5kID0gbmV3QmFja2dyb3VuZDtcclxuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBuZXdCYWNrZ3JvdW5kO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRpbGUucHJvdG90eXBlLCBcImNvbG9yXCIsIHtcclxuICAgICAgICAvKiogR2V0IG9yIHNldCB0aGUgY29sb3IgY29sb3VyICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jb2xvcjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKG5ld2NvbG9yKSB7XHJcbiAgICAgICAgICAgIGlmIChuZXdjb2xvciAhPT0gdGhpcy5fY29sb3IpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NvbG9yID0gbmV3Y29sb3I7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGUuY29sb3IgPSBuZXdjb2xvcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUaWxlLnByb3RvdHlwZSwgXCJwb3NpdGlvblwiLCB7XHJcbiAgICAgICAgLyoqIEdldCBvciBzZXQgcG9zaXRpb24gKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Bvc2l0aW9uO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAocG9zaXRpb24pIHtcclxuICAgICAgICAgICAgdGhpcy5fcG9zaXRpb24gPSBfX2Fzc2lnbih7fSwgcG9zaXRpb24pO1xyXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGUubGVmdCA9IHBvc2l0aW9uLnggKiB0aGlzLnRpbGVXaWR0aCArIFwicHhcIjtcclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLnRvcCA9IHBvc2l0aW9uLnkgKiB0aGlzLnRpbGVIZWlnaHQgKyBcInB4XCI7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRpbGUucHJvdG90eXBlLCBcInRpbGVXaWR0aFwiLCB7XHJcbiAgICAgICAgLyoqIEdldCBvciBzZXQgdGlsZSB3aWR0aCAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdGlsZVdpZHRoO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAobmV3V2lkdGgpIHtcclxuICAgICAgICAgICAgdGhpcy5fdGlsZVdpZHRoID0gbmV3V2lkdGg7XHJcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS53aWR0aCA9IG5ld1dpZHRoICsgXCJweFwiO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUaWxlLnByb3RvdHlwZSwgXCJ0aWxlSGVpZ2h0XCIsIHtcclxuICAgICAgICAvKiogR2V0IG9yIHNldCB0aGUgdGlsZSBoZWlnaHQgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RpbGVIZWlnaHQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChuZXdIZWlnaHQpIHtcclxuICAgICAgICAgICAgdGhpcy5fdGlsZUhlaWdodCA9IG5ld0hlaWdodDtcclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLmhlaWdodCA9IG5ld0hlaWdodCArIFwicHhcIjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVGlsZS5wcm90b3R5cGUsIFwiY2xhc3NOYW1lXCIsIHtcclxuICAgICAgICAvKiogR2V0IG9yIHNldCB0aGUgY2xhc3NuYW1lICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNsYXNzTGlzdC5qb2luKFwiIFwiKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKG5ld0NsYXNzKSB7XHJcbiAgICAgICAgICAgIGlmIChuZXdDbGFzcykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbGFzc0xpc3QgPSBuZXdDbGFzcy5zcGxpdChcIiBcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsYXNzTGlzdCA9IFtdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRpbGUucHJvdG90eXBlLCBcImNsYXNzTGlzdFwiLCB7XHJcbiAgICAgICAgLyoqIEdldCBvciBzZXQgdGhlIGxpc3Qgb2YgY2xhc3NlcyAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX19zcHJlYWRBcnJheXMoW2Jhc2VDbGFzc05hbWVdLCB0aGlzLl9jbGFzc0xpc3QpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAobmV3Q2xhc3NMaXN0KSB7XHJcbiAgICAgICAgICAgIHZhciBfYSwgX2I7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5fY2xhc3NMaXN0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jbGFzc0xpc3QgPSBbXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBPbmx5IGFkZC9yZW1vdmUgY2xhc3NlcyBpZiB0aGUgdHdvIGxpc3RzIGFyZSBhY3R1YWxseSBkaWZmZXJlbnRcclxuICAgICAgICAgICAgLy8gVGhpcyBpcyB1Z2x5LCBidXQgY2hhbmdpbmcgdGhlIERPTSBpcyBtb3JlIGV4cGVuc2l2ZSB0aGFuIHRoaXMgaXMuXHJcbiAgICAgICAgICAgIGlmIChuZXdDbGFzc0xpc3QubGVuZ3RoICE9PSB0aGlzLl9jbGFzc0xpc3QubGVuZ3RoIHx8XHJcbiAgICAgICAgICAgICAgICAhbmV3Q2xhc3NMaXN0LmV2ZXJ5KGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBfdGhpcy5fY2xhc3NMaXN0LmluY2x1ZGVzKG5hbWUpOyB9KSB8fFxyXG4gICAgICAgICAgICAgICAgIXRoaXMuX2NsYXNzTGlzdC5ldmVyeShmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gbmV3Q2xhc3NMaXN0LmluY2x1ZGVzKG5hbWUpOyB9KSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2NsYXNzTGlzdC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgKF9hID0gdGhpcy5lbGVtZW50LmNsYXNzTGlzdCkucmVtb3ZlLmFwcGx5KF9hLCB0aGlzLl9jbGFzc0xpc3QpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2xhc3NMaXN0ID0gbmV3Q2xhc3NMaXN0LmZpbHRlcihmdW5jdGlvbiAoeCkgeyByZXR1cm4geC50cmltKCkgJiYgeCAhPT0gYmFzZUNsYXNzTmFtZTsgfSk7XHJcbiAgICAgICAgICAgICAgICBpZiAobmV3Q2xhc3NMaXN0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdXNpbmcgdGhlIGdldHRlciwgdG8gZW5zdXJlIGJhc2VDbGFzc05hbWUgaXMgc3RpbGwgb24gdGhlIGxpc3QuXHJcbiAgICAgICAgICAgICAgICAgICAgKF9iID0gdGhpcy5lbGVtZW50LmNsYXNzTGlzdCkuYWRkLmFwcGx5KF9iLCB0aGlzLmNsYXNzTGlzdCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICAvKiogU2V0IG9wdGlvbnMgZm9yIHRoZSB0aWxlICovXHJcbiAgICBUaWxlLnByb3RvdHlwZS5zZXRPcHRpb25zID0gZnVuY3Rpb24gKG5ld09wdGlvbnMpIHtcclxuICAgICAgICB2YXIgX2EgPSBuZXdPcHRpb25zLmNvbnRlbnQsIGNvbnRlbnQgPSBfYSA9PT0gdm9pZCAwID8gXCJcIiA6IF9hLCBfYiA9IG5ld09wdGlvbnMuYmFja2dyb3VuZCwgYmFja2dyb3VuZCA9IF9iID09PSB2b2lkIDAgPyBcIlwiIDogX2IsIF9jID0gbmV3T3B0aW9ucy5jb2xvciwgY29sb3IgPSBfYyA9PT0gdm9pZCAwID8gXCJcIiA6IF9jLCBfZCA9IG5ld09wdGlvbnMuY2xhc3NOYW1lLCBjbGFzc05hbWUgPSBfZCA9PT0gdm9pZCAwID8gXCJcIiA6IF9kLCBjbGFzc0xpc3QgPSBuZXdPcHRpb25zLmNsYXNzTGlzdDtcclxuICAgICAgICB0aGlzLmNvbnRlbnQgPSBjb250ZW50O1xyXG4gICAgICAgIHRoaXMuYmFja2dyb3VuZCA9IGJhY2tncm91bmQ7XHJcbiAgICAgICAgdGhpcy5jb2xvciA9IGNvbG9yO1xyXG4gICAgICAgIGlmIChjbGFzc0xpc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jbGFzc0xpc3QgPSBjbGFzc0xpc3Q7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGUgb3B0aW9ucyBmb3IgdGhlIHRpbGVcclxuICAgICAqL1xyXG4gICAgVGlsZS5wcm90b3R5cGUudXBkYXRlT3B0aW9ucyA9IGZ1bmN0aW9uIChuZXdPcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIGNvbnRlbnQgPSBuZXdPcHRpb25zLmNvbnRlbnQsIGJhY2tncm91bmQgPSBuZXdPcHRpb25zLmJhY2tncm91bmQsIGNvbG9yID0gbmV3T3B0aW9ucy5jb2xvciwgY2xhc3NOYW1lID0gbmV3T3B0aW9ucy5jbGFzc05hbWUsIGNsYXNzTGlzdCA9IG5ld09wdGlvbnMuY2xhc3NMaXN0O1xyXG4gICAgICAgIGlmICh0eXBlb2YgY29udGVudCAhPT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRlbnQgPSBjb250ZW50O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZW9mIGJhY2tncm91bmQgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAgICAgdGhpcy5iYWNrZ3JvdW5kID0gYmFja2dyb3VuZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiBjb2xvciAhPT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgICB0aGlzLmNvbG9yID0gY29sb3I7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjbGFzc0xpc3QgJiYgY2xhc3NMaXN0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgdGhpcy5jbGFzc0xpc3QgPSBjbGFzc0xpc3Q7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBjbGFzc05hbWUgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAgICAgdGhpcy5jbGFzc05hbWUgPSBjbGFzc05hbWU7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKiBDaGVjayBpZiBhIGNvbnRlbnRFbGVtZW50IGV4aXN0cywgYW5kIGlmIGl0IGRvZXNuJ3QsIGFkZCBpdCAqL1xyXG4gICAgVGlsZS5wcm90b3R5cGUuY29uZmlybUNvbnRlbnRFbGVtZW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5jb250ZW50RWxlbWVudCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLmNvbnRlbnRFbGVtZW50KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFRpbGU7XHJcbn0oKSk7XHJcbmV4cG9ydCBkZWZhdWx0IFRpbGU7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVRpbGUuanMubWFwIiwidmFyIF9fcmVzdCA9ICh0aGlzICYmIHRoaXMuX19yZXN0KSB8fCBmdW5jdGlvbiAocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxyXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XHJcbiAgICAgICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn07XHJcbmltcG9ydCBUaWxlIGZyb20gJy4vVGlsZS5qcyc7XHJcbmltcG9ydCBjc3MgZnJvbSAnLi9EaXNwbGF5U3R5bGUuanMnO1xyXG4vKiogRGlzcGxheSBjbGFzcywgdG8gY3JlYXRlIGFuZCBjb250cm9sIGEgZGlzcGxheSAqL1xyXG52YXIgRGlzcGxheSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKiBDcmVhdGUgYSBuZXcgRGlzcGxheVxyXG4gICAgICogIEBwYXJhbSB7RGlzcGxheVBhcmFtc30gcGFyYW1ldGVycyAtIE9iamVjdCBvZiBwYXJhbWV0ZXJzIHRvIGluaXRpYWxpemUgdGhlIGRpc3BsYXkuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIERpc3BsYXkocGFyYW1ldGVycykge1xyXG4gICAgICAgIHZhciB0YXJnZXQgPSBwYXJhbWV0ZXJzLnRhcmdldCwgX2EgPSBwYXJhbWV0ZXJzLndpZHRoLCB3aWR0aCA9IF9hID09PSB2b2lkIDAgPyAxIDogX2EsIF9iID0gcGFyYW1ldGVycy5oZWlnaHQsIGhlaWdodCA9IF9iID09PSB2b2lkIDAgPyAxIDogX2IsIHRpbGVXaWR0aCA9IHBhcmFtZXRlcnMudGlsZVdpZHRoLCB0aWxlSGVpZ2h0ID0gcGFyYW1ldGVycy50aWxlSGVpZ2h0LCByZXN0ID0gX19yZXN0KHBhcmFtZXRlcnMsIFtcInRhcmdldFwiLCBcIndpZHRoXCIsIFwiaGVpZ2h0XCIsIFwidGlsZVdpZHRoXCIsIFwidGlsZUhlaWdodFwiXSk7XHJcbiAgICAgICAgLy8gU2V0IHRoZSB0YXJnZXRcclxuICAgICAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcclxuICAgICAgICBpZiAodGhpcy50YXJnZXQuY2xhc3NOYW1lKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0LmNsYXNzTGlzdC5hZGQoXCJwdW1wa2luLWNvbnRhaW5lclwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0LmNsYXNzTmFtZSA9IFwicHVtcGtpbi1jb250YWluZXJcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQ3JlYXRlIHRoZSBlbGVtZW50IGZvciB0aGUgZGlzcGxheVxyXG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC5jbGFzc05hbWUgPSBcInB1bXBraW4tZGlzcGxheVwiO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiLCBcInRydWVcIik7XHJcbiAgICAgICAgLy8gU2V0IHRoZSBkaXNwbGF5IGRpbWVuc2lvbnNcclxuICAgICAgICB0aGlzLmRpbWVuc2lvbnMgPSB7IHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfTtcclxuICAgICAgICB0aGlzLnRpbGVTaXplID0ge1xyXG4gICAgICAgICAgICB0aWxlV2lkdGg6ICh0aWxlV2lkdGgpID8gdGlsZVdpZHRoIDogMTYsXHJcbiAgICAgICAgICAgIHRpbGVIZWlnaHQ6ICh0aWxlSGVpZ2h0KSA/IHRpbGVIZWlnaHQgOiAodGlsZVdpZHRoKSA/IHRpbGVXaWR0aCA6IDE2XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvLyBBZGQgc3R5bGUgdG8gdGhlIHBhZ2UgZm9yIHRoZSBkaXNwbGF5XHJcbiAgICAgICAgdGhpcy5hcHBseURlZmF1bHRTdHlsZXMoKTtcclxuICAgICAgICAvLyBBcHBlbmQgdG8gdGhlIGNvbnRhaW5lciBlbGVtZW50XHJcbiAgICAgICAgdGhpcy50YXJnZXQuYXBwZW5kQ2hpbGQodGhpcy5lbGVtZW50KTtcclxuICAgIH1cclxuICAgIDtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEaXNwbGF5LnByb3RvdHlwZSwgXCJ0aWxlU2l6ZVwiLCB7XHJcbiAgICAgICAgLyoqIFRpbGUgc2l6ZSAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdGlsZVNpemU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChuZXdUaWxlU2l6ZSkge1xyXG4gICAgICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgICAgIHRoaXMuX3RpbGVTaXplID0gbmV3VGlsZVNpemU7XHJcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS5mb250U2l6ZSA9IG5ld1RpbGVTaXplLnRpbGVIZWlnaHQgKyBcInB4XCI7XHJcbiAgICAgICAgICAgIChfYSA9IHRoaXMudGlsZXMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5mb3JFYWNoKGZ1bmN0aW9uICh0aWxlKSB7XHJcbiAgICAgICAgICAgICAgICB0aWxlLnRpbGVXaWR0aCA9IG5ld1RpbGVTaXplLnRpbGVXaWR0aDtcclxuICAgICAgICAgICAgICAgIHRpbGUudGlsZUhlaWdodCA9IG5ld1RpbGVTaXplLnRpbGVIZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICB0aWxlLnBvc2l0aW9uID0gdGlsZS5wb3NpdGlvbjtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMucmVzZXRTaXplKCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgO1xyXG4gICAgO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KERpc3BsYXkucHJvdG90eXBlLCBcImRpbWVuc2lvbnNcIiwge1xyXG4gICAgICAgIC8qKiBHZXQgb3Igc2V0IHRoZSBkaXNwbGF5IGRpbWVuc2lvbnMgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHsgd2lkdGg6IHRoaXMuX3dpZHRoLCBoZWlnaHQ6IHRoaXMuX2hlaWdodCB9O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAobmV3RGltZW5zaW9ucykge1xyXG4gICAgICAgICAgICBpZiAobmV3RGltZW5zaW9ucy53aWR0aCAhPT0gdGhpcy5fd2lkdGggJiYgbmV3RGltZW5zaW9ucy5oZWlnaHQgIT09IHRoaXMuX2hlaWdodCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fd2lkdGggPSBuZXdEaW1lbnNpb25zLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faGVpZ2h0ID0gbmV3RGltZW5zaW9ucy5oZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAvLyBSZXNldCB0aGUgZGlzcGxheSB0byBhY2NvbW9kYXRlIHRoZSBuZXcgc2l6ZVxyXG4gICAgICAgICAgICAgICAgdGhpcy5hbGxvY2F0ZURpc3BsYXkoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVzZXRTaXplKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1vdmVUb0NlbnRlcigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgO1xyXG4gICAgO1xyXG4gICAgLyoqIFJlc2V0IGRpc3BsYXkgZWxlbWVudCBzaXplICovXHJcbiAgICBEaXNwbGF5LnByb3RvdHlwZS5yZXNldFNpemUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3dpZHRoICYmIHRoaXMuX2hlaWdodCAmJiB0aGlzLnRpbGVTaXplKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS53aWR0aCA9IHRoaXMuX3dpZHRoICogdGhpcy50aWxlU2l6ZS50aWxlV2lkdGggKyBcInB4XCI7XHJcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS5oZWlnaHQgPSB0aGlzLl9oZWlnaHQgKiB0aGlzLnRpbGVTaXplLnRpbGVIZWlnaHQgKyBcInB4XCI7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKiBQb3NpdGlvbiB0byBjZW50ZXIgdGhlIGRpc3BsYXkgdmlldyBvbiAqL1xyXG4gICAgRGlzcGxheS5wcm90b3R5cGUuY2VudGVyRGlzcGxheSA9IGZ1bmN0aW9uICh4LCB5KSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB4ID09PSBcInVuZGVmaW5lZFwiIHx8IHR5cGVvZiB5ID09PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2VudGVyUG9zaXRpb24gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmNlbnRlclBvc2l0aW9uID0ge1xyXG4gICAgICAgICAgICAgICAgeDogeCxcclxuICAgICAgICAgICAgICAgIHk6IHlcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5tb3ZlVG9DZW50ZXIoKTtcclxuICAgIH07XHJcbiAgICBEaXNwbGF5LnByb3RvdHlwZS5tb3ZlVG9DZW50ZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY2VudGVyUG9zaXRpb24pIHtcclxuICAgICAgICAgICAgdmFyIHhQZXJjZW50ID0gKHRoaXMuY2VudGVyUG9zaXRpb24ueCArIDAuNSkgLyB0aGlzLmRpbWVuc2lvbnMud2lkdGg7XHJcbiAgICAgICAgICAgIHZhciB5UGVyY2VudCA9ICh0aGlzLmNlbnRlclBvc2l0aW9uLnkgKyAwLjUpIC8gdGhpcy5kaW1lbnNpb25zLmhlaWdodDtcclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9IFwidHJhbnNsYXRlKFwiICsgLXhQZXJjZW50ICogMTAwICsgXCIlLFwiICsgLXlQZXJjZW50ICogMTAwICsgXCIlKVwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9IFwiXCI7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKiBCdWlsZCB0aGUgYXJyYXkgb2YgdGlsZXMgYW5kIGF0dGFjaCB0aGVtIHRvIHRoZSBkaXNwbGF5ICovXHJcbiAgICBEaXNwbGF5LnByb3RvdHlwZS5hbGxvY2F0ZURpc3BsYXkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAvLyBTdGFydCBhIGZyZXNoIHRpbGVzIGFycmF5XHJcbiAgICAgICAgaWYgKHRoaXMudGlsZXMpIHtcclxuICAgICAgICAgICAgLy8gRW1wdHkgZGlzcGxheSBpZiBpdCBoYXMgY29udGVudHMgYWxyZWFkeVxyXG4gICAgICAgICAgICB0aGlzLnRpbGVzLmZvckVhY2goZnVuY3Rpb24gKHRpbGUpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLmVsZW1lbnQucmVtb3ZlQ2hpbGQodGlsZS5lbGVtZW50KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudGlsZXMgPSBbXTtcclxuICAgICAgICAvLyBHZW5lcmF0ZSB0aWxlc1xyXG4gICAgICAgIGZvciAodmFyIHkgPSAwOyB5IDwgdGhpcy5faGVpZ2h0OyB5KyspIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCB0aGlzLl93aWR0aDsgeCsrKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBNYWtlIGEgbmV3IHRpbGVcclxuICAgICAgICAgICAgICAgIHZhciBuZXdUaWxlID0gbmV3IFRpbGUoe1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICcnLFxyXG4gICAgICAgICAgICAgICAgfSwgeyB4OiB4LCB5OiB5IH0sIHRoaXMudGlsZVNpemUpO1xyXG4gICAgICAgICAgICAgICAgLy8gQWRkIGl0IHRvIHRoZSBsaXN0IG9mIHRpbGVzXHJcbiAgICAgICAgICAgICAgICB0aGlzLnRpbGVzLnB1c2gobmV3VGlsZSk7XHJcbiAgICAgICAgICAgICAgICAvLyBBcHBlbmQgdG8gdGhlIGFjdHVhbCBkaXNwbGF5XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQobmV3VGlsZS5lbGVtZW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICA7XHJcbiAgICAvKiogR2V0IHRoZSBkaXNwbGF5IHRpbGUgYXQgdGhlIHNwZWNpZmllZCBwb3NpdGlvblxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHggLSBQb3NpdGlvbiBmcm9tIHRoZSBsZWZ0IHNpZGUgb2YgdGhlIGRpc3BsYXlcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gUG9zaXRpb24gZnJvbSB0aGUgdG9wIG9mIHRoZSBkaXNwbGF5XHJcbiAgICAqL1xyXG4gICAgRGlzcGxheS5wcm90b3R5cGUuZ2V0VGlsZSA9IGZ1bmN0aW9uICh4LCB5KSB7XHJcbiAgICAgICAgaWYgKHggPj0gMCAmJiB4IDwgdGhpcy5fd2lkdGggJiYgeSA+PSAwICYmIHkgPCB0aGlzLl9oZWlnaHQpIHtcclxuICAgICAgICAgICAgdmFyIGluZGV4ID0geCArIHkgKiB0aGlzLl93aWR0aDtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudGlsZXNbaW5kZXhdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgO1xyXG4gICAgLyoqIFRha2UgaW5wdXQgYW5kIGZvcm1hdCBpbnRvIFRpbGVPcHRpb25zICovXHJcbiAgICBEaXNwbGF5LnByb3RvdHlwZS5mb3JtYXRUaWxlT3B0aW9ucyA9IGZ1bmN0aW9uIChpbnB1dCkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHsgY29udGVudDogaW5wdXQgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoaW5wdXQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4geyBjb250ZW50OiBpbnB1dCB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGlucHV0O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKiogU2V0IGRldGFpbHMgZm9yIHRoZSBzcGVjaWZpZWQgdGlsZSAqL1xyXG4gICAgRGlzcGxheS5wcm90b3R5cGUuc2V0VGlsZSA9IGZ1bmN0aW9uICh4LCB5LCBuZXdPcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIHRpbGUgPSB0aGlzLmdldFRpbGUoeCwgeSk7XHJcbiAgICAgICAgaWYgKHRpbGUpIHtcclxuICAgICAgICAgICAgdGlsZS5zZXRPcHRpb25zKHRoaXMuZm9ybWF0VGlsZU9wdGlvbnMobmV3T3B0aW9ucykpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICA7XHJcbiAgICAvKiogVXBkYXRlIGRldGFpbHMgZm9yIHRoZSBzcGVjaWZpZWQgdGlsZSwgcHJlc2VydmluZyBldmVyeSB1bnNldCBwcm9wZXJ0eS4gKi9cclxuICAgIERpc3BsYXkucHJvdG90eXBlLnVwZGF0ZVRpbGUgPSBmdW5jdGlvbiAoeCwgeSwgbmV3T3B0aW9ucykge1xyXG4gICAgICAgIHZhciB0aWxlID0gdGhpcy5nZXRUaWxlKHgsIHkpO1xyXG4gICAgICAgIGlmICh0aWxlKSB7XHJcbiAgICAgICAgICAgIHRpbGUudXBkYXRlT3B0aW9ucyh0aGlzLmZvcm1hdFRpbGVPcHRpb25zKG5ld09wdGlvbnMpKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgO1xyXG4gICAgLyoqIEdpdmVuIHRoZSBzaXplIG9mIHRoZSB0YXJnZXQgY29udGFpbmVyLCBhbmQgdGhlIHRpbGUgc2l6ZSwgZGV0ZXJtaW5lIHRoZSBudW1iZXIgb2YgdGlsZXMgbmVlZGVkLiAqL1xyXG4gICAgRGlzcGxheS5wcm90b3R5cGUuY2FsY3VsYXRlRGltZW5zaW9ucyA9IGZ1bmN0aW9uIChjbGllbnRSZWN0KSB7XHJcbiAgICAgICAgaWYgKGNsaWVudFJlY3QgPT09IHZvaWQgMCkgeyBjbGllbnRSZWN0ID0gdGhpcy50YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7IH1cclxuICAgICAgICB2YXIgY2xpZW50V2lkdGggPSBNYXRoLmFicyhjbGllbnRSZWN0LnJpZ2h0IC0gY2xpZW50UmVjdC5sZWZ0KTtcclxuICAgICAgICB2YXIgY2xpZW50SGVpZ2h0ID0gTWF0aC5hYnMoY2xpZW50UmVjdC5ib3R0b20gLSBjbGllbnRSZWN0LnRvcCk7XHJcbiAgICAgICAgLy8gUm91bmQgZG93bjsgd2UgZG8gbm90IHdhbnQgcGFydGlhbCB0aWxlc1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHdpZHRoOiBNYXRoLmZsb29yKGNsaWVudFdpZHRoIC8gdGhpcy50aWxlU2l6ZS50aWxlV2lkdGgpLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IE1hdGguZmxvb3IoY2xpZW50SGVpZ2h0IC8gdGhpcy50aWxlU2l6ZS50aWxlSGVpZ2h0KVxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgO1xyXG4gICAgLyoqIEdpdmVuIHRoZSBzaXplIG9mIHRoZSB0YXJnZXQgY29udGFpbmVyLCBhbmQgdGhlIG51bWJlciBvZiB0aWxlcywgZGV0ZXJtaW5lIHRoZSB0aWxlIHNpemUgbmVlZGVkXHJcbiAgICAgKiAgVGhpcyBhc3N1bWVzIHNxdWFyZSB0aWxlcyBhcmUgZGVzaXJlZC5cclxuICAgICovXHJcbiAgICBEaXNwbGF5LnByb3RvdHlwZS5jYWxjdWxhdGVUaWxlU2l6ZSA9IGZ1bmN0aW9uIChjbGllbnRSZWN0KSB7XHJcbiAgICAgICAgaWYgKGNsaWVudFJlY3QgPT09IHZvaWQgMCkgeyBjbGllbnRSZWN0ID0gdGhpcy50YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7IH1cclxuICAgICAgICB2YXIgY2xpZW50V2lkdGggPSBNYXRoLmFicyhjbGllbnRSZWN0LnJpZ2h0IC0gY2xpZW50UmVjdC5sZWZ0KTtcclxuICAgICAgICB2YXIgY2xpZW50SGVpZ2h0ID0gTWF0aC5hYnMoY2xpZW50UmVjdC5ib3R0b20gLSBjbGllbnRSZWN0LnRvcCk7XHJcbiAgICAgICAgLy8gVGhpcyBjb3VsZCBwb3RlbnRpYWxseSBnaXZlIGFic3VyZCByZXN1bHRzLCBzbyBnZXQgdGhlIFwibmFpdmUgZmlyc3QtZ3Vlc3NcIiBoZXJlXHJcbiAgICAgICAgdmFyIHNpemUgPSB7XHJcbiAgICAgICAgICAgIHRpbGVXaWR0aDogY2xpZW50V2lkdGggLyB0aGlzLmRpbWVuc2lvbnMud2lkdGgsXHJcbiAgICAgICAgICAgIHRpbGVIZWlnaHQ6IGNsaWVudEhlaWdodCAvIHRoaXMuZGltZW5zaW9ucy5oZWlnaHRcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIENob29zZSB0aGUgbG93ZXN0IG9mIHRoZSB0d28uIFRoaXMgaXMgdGhlIG1heGltdW0gc3F1YXJlIHRpbGUgc2l6ZSB0aGF0IHdpbGwgZml0IHRoZSBnaXZlbiBkaW1lbnNpb25zXHJcbiAgICAgICAgdmFyIG1heFRpbGVTaXplID0gTWF0aC5taW4oc2l6ZS50aWxlV2lkdGgsIHNpemUudGlsZUhlaWdodCk7XHJcbiAgICAgICAgLy8gRG9uJ3QgYm90aGVyIHJvdW5kaW5nOyBmb250cyBjYW4gYmUgcHJlY2lzZSBudW1iZXJzXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdGlsZVdpZHRoOiBtYXhUaWxlU2l6ZSxcclxuICAgICAgICAgICAgdGlsZUhlaWdodDogbWF4VGlsZVNpemVcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuICAgIDtcclxuICAgIC8qKiBBZGQgdGhlIGRlZmF1bHQgc3R5bGVzIHRvIHRoZSBoZWFkIG9mIHRoZSBwYWdlLiAqL1xyXG4gICAgRGlzcGxheS5wcm90b3R5cGUuYXBwbHlEZWZhdWx0U3R5bGVzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBzdHlsZXNJZCA9IFwicHVtcGtpbi1kZWZhdWx0LXN0eWxlc1wiO1xyXG4gICAgICAgIC8vIENoZWNrIHRvIG1ha2Ugc3VyZSB0aGUgc3R5bGVzIGFyZW4ndCBhbHJlYWR5IHByZXNlbnRcclxuICAgICAgICBpZiAoIWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHN0eWxlc0lkKSkge1xyXG4gICAgICAgICAgICAvLyBDcmVhdGUgdGhlIHN0eWxlIGVsZW1lbnRcclxuICAgICAgICAgICAgdmFyIHN0eWxlcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcclxuICAgICAgICAgICAgc3R5bGVzLmlkID0gc3R5bGVzSWQ7XHJcbiAgICAgICAgICAgIHN0eWxlcy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xyXG4gICAgICAgICAgICBzdHlsZXMuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XHJcbiAgICAgICAgICAgIC8vIEdldCB0aGUgaGVhZCBvZiB0aGUgcGFnZVxyXG4gICAgICAgICAgICB2YXIgaGVhZCA9IGRvY3VtZW50LmhlYWQ7XHJcbiAgICAgICAgICAgIC8vIEZpbmQgdGhlIGZpcnN0IHN0eWxlIG9yIGxpbmsgZWxlbWVudCwgYW5kIGluc2VydCBpbiBmcm9udCBvZiBpdFxyXG4gICAgICAgICAgICB2YXIgZmlyc3RTdHlsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJzdHlsZSwgbGlua1wiKTtcclxuICAgICAgICAgICAgaGVhZC5pbnNlcnRCZWZvcmUoc3R5bGVzLCBmaXJzdFN0eWxlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIERpc3BsYXk7XHJcbn0oKSk7XHJcbmV4cG9ydCBkZWZhdWx0IERpc3BsYXk7XHJcbjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RGlzcGxheS5qcy5tYXAiLCIvLyBEZWZhdWx0IHN0eWxpbmcgZm9yIHRoZSBkaXNwbGF5LiBUaGlzIGdldHMgaW5zZXJ0ZWQgaW50byB0aGUgZG9jdW1lbnQgaGVhZCwgYmVmb3JlIG90aGVyIHN0eWxlc2hlZXRzIChzbyB0aGF0IHlvdSBjYW4gb3ZlcnJpZGUgdGhlbSBpZiBkZXNpcmVkISlcclxudmFyIGNzcyA9IFwiXFxuLnB1bXBraW4tY29udGFpbmVyIHtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAwMDAwO1xcbiAgICBjb2xvcjogI2ZmZmZmZjtcXG59XFxuXFxuLnB1bXBraW4tZGlzcGxheSB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgbGVmdDogNTAlO1xcbiAgICB0b3A6IDUwJTtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XFxufVxcblxcbi5wdW1wa2luLXRpbGUge1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxufVxcblxcbi5wdW1wa2luLXRpbGUgPiAqIHtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICBsZWZ0OiA1MCU7XFxuICAgIHRvcDogNTAlO1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcXG4gICAgei1pbmRleDogMTA7XFxufVxcblwiO1xyXG5leHBvcnQgZGVmYXVsdCBjc3M7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPURpc3BsYXlTdHlsZS5qcy5tYXAiLCJ2YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn07XHJcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufTtcclxuLyoqIEV2ZW50IG1hbmFnZXIsIHRvIGtlZXAgdHJhY2sgb2YgdHVybnMgKi9cclxudmFyIEV2ZW50TWFuYWdlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEV2ZW50TWFuYWdlcihwYXJhbWV0ZXJzKSB7XHJcbiAgICAgICAgaWYgKCFwYXJhbWV0ZXJzKSB7XHJcbiAgICAgICAgICAgIHBhcmFtZXRlcnMgPSB7fTtcclxuICAgICAgICB9XHJcbiAgICAgICAgO1xyXG4gICAgICAgIHZhciBfYSA9IHBhcmFtZXRlcnMudHlwZSwgdHlwZSA9IF9hID09PSB2b2lkIDAgPyBcInNpbXBsZVwiIDogX2E7XHJcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcclxuICAgICAgICB0aGlzLnF1ZXVlID0gW107XHJcbiAgICAgICAgdGhpcy50aW1lID0gMDtcclxuICAgIH1cclxuICAgIDtcclxuICAgIC8qKiBBZGQgYW4gZXZlbnQgdG8gdGhlIHF1ZXVlICovXHJcbiAgICBFdmVudE1hbmFnZXIucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChhZGRlZEV2ZW50KSB7XHJcbiAgICAgICAgdmFyIGV2ZW50ID0ge307XHJcbiAgICAgICAgLy8gRGV0ZXJtaW5lIHR5cGUgb2YgdGhlIGlucHV0LCBhbmQgaGFuZGxlIGFjY29yZGluZ2x5XHJcbiAgICAgICAgaWYgKGFkZGVkRXZlbnQgaW5zdGFuY2VvZiBGdW5jdGlvbikge1xyXG4gICAgICAgICAgICBldmVudC5jYWxsYmFjayA9IGFkZGVkRXZlbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKFwiYWN0XCIgaW4gYWRkZWRFdmVudCkge1xyXG4gICAgICAgICAgICBldmVudC5hY3RvciA9IGFkZGVkRXZlbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKGV2ZW50LCBhZGRlZEV2ZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQXNzdW1lIHJlcGVhdGluZyBpZiBhbiBhY3RvciB3YXMgcHJvdmlkZWRcclxuICAgICAgICBpZiAodHlwZW9mIGV2ZW50LnJlcGVhdHMgPT09IFwidW5kZWZpbmVkXCIgJiYgZXZlbnQuYWN0b3IpIHtcclxuICAgICAgICAgICAgZXZlbnQucmVwZWF0cyA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIENvbXBsZXggZXZlbnQgcXVldWUgdXNlcyBkZWxheSB0aW1lIGEgYml0IGJldHRlclxyXG4gICAgICAgIGlmICh0aGlzLnR5cGUgPT09IFwiY29tcGxleFwiKSB7XHJcbiAgICAgICAgICAgIGlmICghZXZlbnQuZGVsYXkpIHtcclxuICAgICAgICAgICAgICAgIGV2ZW50LmRlbGF5ID0gMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgc2NoZWR1bGVGb3IgPSBldmVudC5kZWxheSArIHRoaXMudGltZTtcclxuICAgICAgICAgICAgLy8gSW5zZXJ0IHRoZSBldmVudCBhdCB0aGUgYXBwcm9wcmlhdGUgdGltZVxyXG4gICAgICAgICAgICBpZiAodGhpcy5xdWV1ZS5sZW5ndGggPT09IDAgfHwgdGhpcy5xdWV1ZVt0aGlzLnF1ZXVlLmxlbmd0aCAtIDFdLnRpbWUgPD0gc2NoZWR1bGVGb3IpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucXVldWUucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IGV2ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgIHRpbWU6IHNjaGVkdWxlRm9yXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5xdWV1ZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzY2hlZHVsZUZvciA8IHRoaXMucXVldWVbaV0udGltZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnF1ZXVlLnNwbGljZShpLCAwLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudDogZXZlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lOiBzY2hlZHVsZUZvclxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBTaW1wbGUsIG5vIHdlaXJkIHRpbWUgc2hpdFxyXG4gICAgICAgICAgICB0aGlzLnF1ZXVlLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgZXZlbnQ6IGV2ZW50LFxyXG4gICAgICAgICAgICAgICAgdGltZTogMFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqIFJ1biB0aGUgbmV4dCBldmVudCAqL1xyXG4gICAgRXZlbnRNYW5hZ2VyLnByb3RvdHlwZS5hZHZhbmNlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHRoaXNFdmVudDtcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ29uZmlybSBpZiB0aGVyZSBpcyBhbnl0aGluZyBpbiB0aGUgcXVldWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucXVldWUubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFdmVudCBxdWV1ZSBpcyBlbXB0eS5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0V2ZW50ID0gdGhpcy5xdWV1ZS5zaGlmdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgdGhlIHRpbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50aW1lID0gdGhpc0V2ZW50LnRpbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHJlcGVhdHMgaXMgYSBudW1iZXIsIHJlZHVjZSBpdC5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzRXZlbnQuZXZlbnQucmVwZWF0cyA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0V2ZW50LmV2ZW50LnJlcGVhdHMtLTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiBpdCBuZWVkcyB0byByZXBlYXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNFdmVudC5ldmVudC5yZXBlYXRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZS1hZGQgdG8gdGhlIHF1ZXVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZCh0aGlzRXZlbnQuZXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpc0V2ZW50LmV2ZW50LmNhbGxiYWNrKSByZXR1cm4gWzMgLypicmVhayovLCAyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpc0V2ZW50LmV2ZW50LmNhbGxiYWNrKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDI7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXNFdmVudC5ldmVudC5hY3RvcikgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXNFdmVudC5ldmVudC5hY3Rvci5hY3QoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gNDtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6IHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqIFJlbW92ZSBhY3RvciBmcm9tIHRoZSBldmVudCBxdWV1ZSAqL1xyXG4gICAgRXZlbnRNYW5hZ2VyLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAoYWN0b3IpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBtYXRjaGVzID0gW107XHJcbiAgICAgICAgdGhpcy5xdWV1ZS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCwgaW5kZXgpIHtcclxuICAgICAgICAgICAgaWYgKGV2ZW50LmV2ZW50LmFjdG9yID09PSBhY3Rvcikge1xyXG4gICAgICAgICAgICAgICAgbWF0Y2hlcy5wdXNoKGluZGV4KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIFJldmVyc2UgbWF0Y2hlcyAod29yayBmcm9tIHRoZSBlbmQgZmlyc3QpXHJcbiAgICAgICAgbWF0Y2hlcy5yZXZlcnNlKCk7XHJcbiAgICAgICAgLy8gUmVtb3ZlIGVhY2ggbWF0Y2hcclxuICAgICAgICBtYXRjaGVzLmZvckVhY2goZnVuY3Rpb24gKG1hdGNoKSB7XHJcbiAgICAgICAgICAgIF90aGlzLnF1ZXVlLnNwbGljZShtYXRjaCwgMSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50TWFuYWdlci5wcm90b3R5cGUsIFwibGVuZ3RoXCIsIHtcclxuICAgICAgICAvKiogRGV0ZXJtaW5lIHRoZSBudW1iZXIgb2YgcXVldWVkIGV2ZW50cyBpbiB0aGUgcXVldWUuICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnF1ZXVlLmxlbmd0aDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gRXZlbnRNYW5hZ2VyO1xyXG59KCkpO1xyXG5leHBvcnQgZGVmYXVsdCBFdmVudE1hbmFnZXI7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUV2ZW50TWFuYWdlci5qcy5tYXAiLCIvKiogUmFuZG9tIGdlbmVyYXRvciAqL1xyXG52YXIgUmFuZG9tID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUmFuZG9tKHNlZWQsIGJhc2UpIHtcclxuICAgICAgICBpZiAoIXNlZWQpIHtcclxuICAgICAgICAgICAgLy8gR2V0IHNlZWQgZnJvbSBtaWxsaXNlY29uZHMgc2luY2UgSmFuIDFzdCwgMTk3MFxyXG4gICAgICAgICAgICBzZWVkID0gRGF0ZS5ub3coKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zZWVkID0gTWF0aC5mbG9vcihzZWVkKTtcclxuICAgICAgICB0aGlzLndleWwgPSAwO1xyXG4gICAgICAgIHRoaXMueCA9IDA7XHJcbiAgICAgICAgdGhpcy5iYXNlID0gKGJhc2UpID8gYmFzZSA6IDEwMDAwMDtcclxuICAgICAgICAvLyBSdW4gaXQgYSBjb3VwbGUgb2YgdGltZXMsIGluIGNhc2UgdGhlIHNlZWQgaXNuJ3QgdGhhdCBnb29kLlxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLmdldFJhbmRvbSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIDtcclxuICAgIC8qKiBHZW5lcmF0ZSBhIHJhbmRvbSBudW1iZXIgZnJvbSAwIDw9IG51bWJlciA8IDEgKi9cclxuICAgIC8vIEFuIGF0dGVtcHQgdG8gcmVwcm9kdWNlIHNvbWV0aGluZyByZXNlbWJsaW5nIHRoZSBNaWRkbGUgU3F1YXJlIFdleWwgU2VxdWVuY2UgUFJOR1xyXG4gICAgLy8gU2VlIFdpZHluc2tpICgyMDE3KSBodHRwczovL2FyeGl2Lm9yZy9hYnMvMTcwNC4wMDM1OHY1XHJcbiAgICAvLyBUaGUgYWJvdmUgYWxnb3JpdGhtIHVzZXMgdW5zaWduZWQgaW50cy4gSlMgdXNlcyBzaWduZWQgZmxvYXRzLiBGdXJ0aGVyIHRlc3RpbmcgcmVxdWlyZWQgdG8gc2VlIHdoZXRoZXIgb3Igbm90IHRoaXMgaXMgYWN0dWFsbHkgYSBwcm9ibGVtLlxyXG4gICAgUmFuZG9tLnByb3RvdHlwZS5nZXRSYW5kb20gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy54ICo9IHRoaXMueDtcclxuICAgICAgICB0aGlzLnggKz0gKHRoaXMud2V5bCArPSB0aGlzLnNlZWQpO1xyXG4gICAgICAgIC8vIE5vdGUsID4+PiBtYWtlcyB0aGUgc2hpZnQgYmUgdW5zaWduZWQuIFRoZSA+Pj4gMCBhdCB0aGUgZW5kIGZsaXBzIHRoZSBcInNpZ25cIiBiaXQgdG8gYmUgcG9zaXRpdmUsIGVuc3VyaW5nIGEgbm9uLW5lZ2F0aXZlIHJlc3VsdC5cclxuICAgICAgICB0aGlzLnggPSAoKHRoaXMueCA+Pj4gMzIpIHwgKHRoaXMueCA8PCAzMikpID4+PiAwO1xyXG4gICAgICAgIHJldHVybiAodGhpcy54ICUgdGhpcy5iYXNlKSAvIHRoaXMuYmFzZTtcclxuICAgIH07XHJcbiAgICAvKiogR2V0IGEgcmFuZG9tIG51bWJlciBpbiBhIHJhbmdlICovXHJcbiAgICBSYW5kb20ucHJvdG90eXBlLmdldE51bWJlciA9IGZ1bmN0aW9uIChtaW4sIG1heCwgaW50ZWdlcikge1xyXG4gICAgICAgIGlmICh0eXBlb2YgaW50ZWdlciA9PT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgICBpZiAoTnVtYmVyLmlzSW50ZWdlcihtaW4pICYmIE51bWJlci5pc0ludGVnZXIobWF4KSkge1xyXG4gICAgICAgICAgICAgICAgaW50ZWdlciA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGludGVnZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IodGhpcy5nZXRSYW5kb20oKSAqIChtYXggKyAxIC0gbWluKSkgKyBNYXRoLmNlaWwobWluKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiAodGhpcy5nZXRSYW5kb20oKSAqIChtYXggLSBtaW4pKSArIG1pbjtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqIEdldCBhIHJhbmRvbSBlbGVtZW50IGZyb20gYW4gYXJyYXkgKi9cclxuICAgIFJhbmRvbS5wcm90b3R5cGUuZ2V0UmFuZG9tRWxlbWVudCA9IGZ1bmN0aW9uIChhcnJheSkge1xyXG4gICAgICAgIHZhciByYW5kb21JbmRleCA9IHRoaXMuZ2V0TnVtYmVyKDAsIGFycmF5Lmxlbmd0aCAtIDEsIHRydWUpO1xyXG4gICAgICAgIHJldHVybiBhcnJheVtyYW5kb21JbmRleF07XHJcbiAgICB9O1xyXG4gICAgLyoqIEdldCBhIHJhbmRvbSBlbGVtZW50LCB3aXRoIHdlaWdodHMgKi9cclxuICAgIFJhbmRvbS5wcm90b3R5cGUuZ2V0V2VpZ2h0ZWRFbGVtZW50ID0gZnVuY3Rpb24gKGFycmF5KSB7XHJcbiAgICAgICAgdmFyIHRvdGFsV2VpZ2h0ID0gMDtcclxuICAgICAgICB2YXIgaW50ZWdlciA9IHRydWU7XHJcbiAgICAgICAgYXJyYXkuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgICAgICB0b3RhbFdlaWdodCArPSBlbGVtZW50LndlaWdodDtcclxuICAgICAgICAgICAgaW50ZWdlciA9IGludGVnZXIgJiYgTnVtYmVyLmlzSW50ZWdlcihlbGVtZW50LndlaWdodCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdmFyIHJhbmRvbU51bWJlciA9IHRoaXMuZ2V0TnVtYmVyKChpbnRlZ2VyKSA/IDEgOiAwLCB0b3RhbFdlaWdodCwgaW50ZWdlcik7XHJcbiAgICAgICAgLy8gR28gdGhyb3VnaCB0aGUgYXJyYXkgdW50aWwgd2UgaGF2ZSBhIHdpbm5lclxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgcmFuZG9tTnVtYmVyIC09IGFycmF5W2ldLndlaWdodDtcclxuICAgICAgICAgICAgaWYgKHJhbmRvbU51bWJlciA8PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBGb3VuZCBpdCFcclxuICAgICAgICAgICAgICAgIHJldHVybiBhcnJheVtpXS5vcHRpb247XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gTm90IGZvdW5kOyBzZWVtcyBsaWtlIGEgcHJvYmxlbVxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIG1hdGNoIGZvdW5kLlwiKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gUmFuZG9tO1xyXG59KCkpO1xyXG5leHBvcnQgeyBSYW5kb20gfTtcclxuZXhwb3J0IGRlZmF1bHQgUmFuZG9tO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1SYW5kb20uanMubWFwIiwidmFyIF9fcmVzdCA9ICh0aGlzICYmIHRoaXMuX19yZXN0KSB8fCBmdW5jdGlvbiAocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxyXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XHJcbiAgICAgICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn07XHJcbnZhciBfX3NwcmVhZEFycmF5cyA9ICh0aGlzICYmIHRoaXMuX19zcHJlYWRBcnJheXMpIHx8IGZ1bmN0aW9uICgpIHtcclxuICAgIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xyXG4gICAgZm9yICh2YXIgciA9IEFycmF5KHMpLCBrID0gMCwgaSA9IDA7IGkgPCBpbDsgaSsrKVxyXG4gICAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxyXG4gICAgICAgICAgICByW2tdID0gYVtqXTtcclxuICAgIHJldHVybiByO1xyXG59O1xyXG4vKiogUGF0aGZpbmRlciB0byBkZXRlcm1pbmUgaG93IHRvIHRyYXZlbCBmcm9tIG9uZSBwb2ludCB0byBhbm90aGVyICovXHJcbnZhciBQYXRoRmluZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUGF0aEZpbmRlcihwYXJhbWV0ZXJzKSB7XHJcbiAgICAgICAgdmFyIGNhblBhc3MgPSBwYXJhbWV0ZXJzLmNhblBhc3MsIG1ldHJpYyA9IHBhcmFtZXRlcnMubWV0cmljLCBtYXhJdGVyYXRpb25zID0gcGFyYW1ldGVycy5tYXhJdGVyYXRpb25zLCB3ZWlnaHQgPSBwYXJhbWV0ZXJzLndlaWdodCwgcmVzdCA9IF9fcmVzdChwYXJhbWV0ZXJzLCBbXCJjYW5QYXNzXCIsIFwibWV0cmljXCIsIFwibWF4SXRlcmF0aW9uc1wiLCBcIndlaWdodFwiXSk7XHJcbiAgICAgICAgdGhpcy5jYW5QYXNzID0gY2FuUGFzcztcclxuICAgICAgICBpZiAoIW1ldHJpYykge1xyXG4gICAgICAgICAgICAvLyBEZWZhdWx0IG1ldHJpYyBpcyBNYW5oYXR0YW4gbWV0cmljLCBpZiBub25lIHByb3ZpZGVkXHJcbiAgICAgICAgICAgIG1ldHJpYyA9IGZ1bmN0aW9uIChwb3NpdGlvbjEsIHBvc2l0aW9uMikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguYWJzKHBvc2l0aW9uMlsxXSAtIHBvc2l0aW9uMVsxXSkgKyBNYXRoLmFicyhwb3NpdGlvbjJbMF0gLSBwb3NpdGlvbjFbMF0pO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXdlaWdodCkge1xyXG4gICAgICAgICAgICAvLyBEZWZhdWx0IHRvIGV2ZXJ5dGhpbmcgYmVpbmcgbGVuZ3RoIG9mIDFcclxuICAgICAgICAgICAgd2VpZ2h0ID0gZnVuY3Rpb24gKHBvc2l0aW9uKSB7IHJldHVybiAxOyB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm1heEl0ZXJhdGlvbnMgPSBtYXhJdGVyYXRpb25zO1xyXG4gICAgICAgIHRoaXMubWV0cmljID0gbWV0cmljO1xyXG4gICAgICAgIHRoaXMud2VpZ2h0ID0gd2VpZ2h0O1xyXG4gICAgfVxyXG4gICAgLyoqIEZpbmQgcm91dGUgZnJvbSBzdGFydFBvc2l0aW9uIHRvIGVuZFBvc2l0aW9uLCB2aWEgQSogKi9cclxuICAgIFBhdGhGaW5kZXIucHJvdG90eXBlLmZpbmRQYXRoID0gZnVuY3Rpb24gKHN0YXJ0UG9zaXRpb24sIGVuZFBvc2l0aW9uLCBvcnRob2dvbmFsT25seSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKG9ydGhvZ29uYWxPbmx5ID09PSB2b2lkIDApIHsgb3J0aG9nb25hbE9ubHkgPSBmYWxzZTsgfVxyXG4gICAgICAgIHZhciByb3V0ZSA9IFtdO1xyXG4gICAgICAgIC8vIExpbWl0IHRoZSBsb29wIHNvIGl0IGRvZXNuJ3QgYnJlYWsgdGhpbmdzXHJcbiAgICAgICAgdmFyIG1heEl0ZXJhdGlvbnMgPSAodGhpcy5tYXhJdGVyYXRpb25zKSA/IHRoaXMubWF4SXRlcmF0aW9ucyA6IDQwICogdGhpcy5tZXRyaWMoc3RhcnRQb3NpdGlvbiwgZW5kUG9zaXRpb24pO1xyXG4gICAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcclxuICAgICAgICAvLyBJbml0aWFsaXplIHRoZSBsaXN0LCBhbmQgYWRkIHRoZSBzdGFydCB0byBpdFxyXG4gICAgICAgIHZhciBjbG9zZWRMaXN0ID0gW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogX19zcHJlYWRBcnJheXMoc3RhcnRQb3NpdGlvbiksXHJcbiAgICAgICAgICAgICAgICBzdGVwczogMCxcclxuICAgICAgICAgICAgICAgIGRpc3RhbmNlRnJvbUdvYWw6IHRoaXMubWV0cmljKHN0YXJ0UG9zaXRpb24sIGVuZFBvc2l0aW9uKSxcclxuICAgICAgICAgICAgICAgIHByZXZpb3VzTG9jYXRpb246IG51bGxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF07XHJcbiAgICAgICAgdmFyIG9wZW5MaXN0ID0gW107XHJcbiAgICAgICAgLy8gSGFuZGxlIGRpYWdvbmFsc1xyXG4gICAgICAgIHZhciBzdGVwU2l6ZUFyciA9IFswLCAxLCAxLjJdO1xyXG4gICAgICAgIC8vIEZpbmQgYSBwYXRoXHJcbiAgICAgICAgd2hpbGUgKGl0ZXJhdGlvbnMgPCBtYXhJdGVyYXRpb25zICYmXHJcbiAgICAgICAgICAgICF0aGlzLmNvbnRhaW5zKGNsb3NlZExpc3QsIGVuZFBvc2l0aW9uKSkge1xyXG4gICAgICAgICAgICBpdGVyYXRpb25zKys7XHJcbiAgICAgICAgICAgIC8vIEV4cGFuZCB0aGUgb3BlbiBsaXN0XHJcbiAgICAgICAgICAgIGNsb3NlZExpc3QuZm9yRWFjaChmdW5jdGlvbiAobG9jYXRpb24pIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAtMTsgaSA8IDI7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAtMTsgaiA8IDI7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3J0aG9nb25hbE9ubHkgJiYgaSAhPT0gMCAmJiBqICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3UG9zaXRpb24gPSBbbG9jYXRpb24ucG9zaXRpb25bMF0gKyBpLCBsb2NhdGlvbi5wb3NpdGlvblsxXSArIGpdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBEZXRlcm1pbmUgdGhlIGNvc3QgLyBzaXplIG9mIHN0ZXAgaW50byB0aGUgc3F1YXJlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGVwU2l6ZSA9IHN0ZXBTaXplQXJyW01hdGguYWJzKGkpICsgTWF0aC5hYnMoaildICogX3RoaXMud2VpZ2h0KG5ld1Bvc2l0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5jYW5QYXNzKG5ld1Bvc2l0aW9uKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluQ2xvc2VkTGlzdEFscmVhZHkgPSBfdGhpcy5nZXRMb2NhdGlvbihjbG9zZWRMaXN0LCBuZXdQb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbk9wZW5MaXN0QWxyZWFkeSA9IF90aGlzLmdldExvY2F0aW9uKG9wZW5MaXN0LCBuZXdQb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5ldyBwb3NpdGlvbiBpcyBpbiBuZWl0aGVyIGxpc3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpbkNsb3NlZExpc3RBbHJlYWR5ICYmICFpbk9wZW5MaXN0QWxyZWFkeSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3Blbkxpc3QucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IG5ld1Bvc2l0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ZXBzOiBsb2NhdGlvbi5zdGVwcyArIHN0ZXBTaXplLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3RhbmNlRnJvbUdvYWw6IF90aGlzLm1ldHJpYyhuZXdQb3NpdGlvbiwgZW5kUG9zaXRpb24pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzTG9jYXRpb246IGxvY2F0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBwb3NpdGlvbiBpcyBhbHJlYWR5IGluIHRoZSBsaXN0LCBhZGp1c3QgdG8gYmUgd2hpY2hldmVyIHZlcnNpb24gaXMgc2hvcnRlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluQ2xvc2VkTGlzdEFscmVhZHkgJiYgaW5DbG9zZWRMaXN0QWxyZWFkeS5zdGVwcyA+IGxvY2F0aW9uLnN0ZXBzICsgc3RlcFNpemUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbkNsb3NlZExpc3RBbHJlYWR5LnN0ZXBzID0gbG9jYXRpb24uc3RlcHMgKyBzdGVwU2l6ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbkNsb3NlZExpc3RBbHJlYWR5LnByZXZpb3VzTG9jYXRpb24gPSBsb2NhdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbk9wZW5MaXN0QWxyZWFkeSAmJiBpbk9wZW5MaXN0QWxyZWFkeS5zdGVwcyA+IGxvY2F0aW9uLnN0ZXBzICsgc3RlcFNpemUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbk9wZW5MaXN0QWxyZWFkeS5zdGVwcyA9IGxvY2F0aW9uLnN0ZXBzICsgc3RlcFNpemU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5PcGVuTGlzdEFscmVhZHkucHJldmlvdXNMb2NhdGlvbiA9IGxvY2F0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgLy8gU29ydCB0aGUgb3BlbiBsaXN0IChoaWdoZXN0IC0tPiBsb3dlc3QpXHJcbiAgICAgICAgICAgIG9wZW5MaXN0LnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIChiLnN0ZXBzICsgYi5kaXN0YW5jZUZyb21Hb2FsKSAtIChhLnN0ZXBzICsgYS5kaXN0YW5jZUZyb21Hb2FsKTsgfSk7XHJcbiAgICAgICAgICAgIC8vIFBvcCBvZmYgdGhlIGxvd2VzdCBvcGVuTGlzdCBpdGVtIGFuZCBhZGQgaXQgdG8gdGhlIGNsb3NlZCBsaXN0XHJcbiAgICAgICAgICAgIGNsb3NlZExpc3QucHVzaChvcGVuTGlzdC5wb3AoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEZvdW5kIGEgcm91dGUhIFB1dCB0aGUgcGllY2VzIHRvZ2V0aGVyIGJ5IHdvcmtpbmcgYmFja3dhcmRzXHJcbiAgICAgICAgdmFyIGxvY2F0aW9uID0gdGhpcy5nZXRMb2NhdGlvbihjbG9zZWRMaXN0LCBlbmRQb3NpdGlvbik7XHJcbiAgICAgICAgaWYgKHRoaXMuY29udGFpbnMoY2xvc2VkTGlzdCwgZW5kUG9zaXRpb24pKSB7XHJcbiAgICAgICAgICAgIGl0ZXJhdGlvbnMgPSAwO1xyXG4gICAgICAgICAgICB3aGlsZSAoKGxvY2F0aW9uLnBvc2l0aW9uWzBdICE9PSBzdGFydFBvc2l0aW9uWzBdIHx8IGxvY2F0aW9uLnBvc2l0aW9uWzFdICE9PSBzdGFydFBvc2l0aW9uWzFdKSAmJiBpdGVyYXRpb25zIDwgbWF4SXRlcmF0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgaXRlcmF0aW9ucysrO1xyXG4gICAgICAgICAgICAgICAgcm91dGUucHVzaChsb2NhdGlvbi5wb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICBsb2NhdGlvbiA9IGxvY2F0aW9uLnByZXZpb3VzTG9jYXRpb247XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJvdXRlLnJldmVyc2UoKTtcclxuICAgIH07XHJcbiAgICBQYXRoRmluZGVyLnByb3RvdHlwZS5pc0VxdWFsID0gZnVuY3Rpb24gKHBvc2l0aW9uMSwgcG9zaXRpb24yKSB7XHJcbiAgICAgICAgcmV0dXJuIChwb3NpdGlvbjEucG9zaXRpb25bMF0gPT09IHBvc2l0aW9uMi5wb3NpdGlvblswXSAmJiBwb3NpdGlvbjEucG9zaXRpb25bMV0gPT09IHBvc2l0aW9uMi5wb3NpdGlvblsxXSk7XHJcbiAgICB9O1xyXG4gICAgUGF0aEZpbmRlci5wcm90b3R5cGUuY29udGFpbnMgPSBmdW5jdGlvbiAobG9jYXRpb25MaXN0LCB0ZXN0TG9jYXRpb24pIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRlc3RMb2NhdGlvbikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGxvY2F0aW9uTGlzdC5zb21lKGZ1bmN0aW9uIChsb2NhdGlvbikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChsb2NhdGlvbi5wb3NpdGlvblswXSA9PT0gdGVzdExvY2F0aW9uWzBdICYmIGxvY2F0aW9uLnBvc2l0aW9uWzFdID09PSB0ZXN0TG9jYXRpb25bMV0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBsb2NhdGlvbkxpc3Quc29tZShmdW5jdGlvbiAobG9jYXRpb24pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5pc0VxdWFsKGxvY2F0aW9uLCB0ZXN0TG9jYXRpb24pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgUGF0aEZpbmRlci5wcm90b3R5cGUuZ2V0TG9jYXRpb24gPSBmdW5jdGlvbiAobG9jYXRpb25MaXN0LCB0ZXN0UG9zaXRpb24pIHtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGxvY2F0aW9uTGlzdF8xID0gbG9jYXRpb25MaXN0OyBfaSA8IGxvY2F0aW9uTGlzdF8xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgbG9jYXRpb25fMSA9IGxvY2F0aW9uTGlzdF8xW19pXTtcclxuICAgICAgICAgICAgaWYgKGxvY2F0aW9uXzEucG9zaXRpb25bMF0gPT09IHRlc3RQb3NpdGlvblswXSAmJiBsb2NhdGlvbl8xLnBvc2l0aW9uWzFdID09PSB0ZXN0UG9zaXRpb25bMV0pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBsb2NhdGlvbl8xO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFBhdGhGaW5kZXI7XHJcbn0oKSk7XHJcbmV4cG9ydCBkZWZhdWx0IFBhdGhGaW5kZXI7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVBhdGhGaW5kZXIuanMubWFwIiwiLyoqIEZpZWxkIG9mIHZpZXcgKi9cclxudmFyIEZPViA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKiBBY2NlcHRzIGEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGlmIGEgbG9jYXRpb24gaXMgc2VldGhyb3VnaCAqL1xyXG4gICAgZnVuY3Rpb24gRk9WKGNhblNlZSwgcmFuZ2UpIHtcclxuICAgICAgICB0aGlzLmNhblNlZSA9IGNhblNlZTtcclxuICAgICAgICB0aGlzLnJhbmdlID0gcmFuZ2UgPyByYW5nZSA6IDg7XHJcbiAgICB9XHJcbiAgICA7XHJcbiAgICAvKiogRG8gdGhlIEZPViBjYWxjdWxhdGlvbiAqL1xyXG4gICAgRk9WLnByb3RvdHlwZS5sb29rID0gZnVuY3Rpb24gKHBvc2l0aW9uLCBsb29rUmFuZ2VPdmVycmlkZSkge1xyXG4gICAgICAgIHZhciByYW5nZSA9IChsb29rUmFuZ2VPdmVycmlkZSkgPyBsb29rUmFuZ2VPdmVycmlkZSA6IHRoaXMucmFuZ2U7XHJcbiAgICAgICAgLy8gU2VlIHRoZSBzdGFydGluZyBsb2NhdGlvbiAoaG9vcmF5ISBHcmVhdCBzdGFydClcclxuICAgICAgICB0aGlzLmNhblNlZShwb3NpdGlvbik7XHJcbiAgICAgICAgLy8gY29uc3QgbG9va1RpbGVzOkFycmF5PFRpbGU+ID0gW107XHJcbiAgICAgICAgdmFyIHNoYWRvd3MgPSBbXTtcclxuICAgICAgICB2YXIgbmV3U2hhZG93cyA9IFtdO1xyXG4gICAgICAgIC8vIEZyb20gbmVhcmJ5IHRvIGZhciBhd2F5XHJcbiAgICAgICAgdmFyIGkgPSAwO1xyXG4gICAgICAgIHZhciBqID0gMDtcclxuICAgICAgICBmb3IgKHZhciBkaXN0YW5jZSA9IDE7IGRpc3RhbmNlIDw9IHJhbmdlOyBkaXN0YW5jZSsrKSB7XHJcbiAgICAgICAgICAgIC8vIEdldCBzcXVhcmUgc2hlbGwgYXJvdW5kIHBvc2l0aW9uXHJcbiAgICAgICAgICAgIGZvciAodmFyIHNpZGUgPSAwOyBzaWRlIDwgNDsgc2lkZSsrKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBlZGdlID0gLWRpc3RhbmNlOyBlZGdlIDw9IGRpc3RhbmNlOyBlZGdlKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2lkZSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpID0gZWRnZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaiA9IGRpc3RhbmNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChzaWRlID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGogPSBlZGdlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpID0gZGlzdGFuY2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNpZGUgPT09IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaSA9IGVkZ2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGogPSAtZGlzdGFuY2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBqID0gZWRnZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaSA9IC1kaXN0YW5jZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxvb2tQb3MgPSBbcG9zaXRpb25bMF0gKyBpLCBwb3NpdGlvblsxXSArIGpdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkaXN0ID0gdGhpcy5kaXN0YW5jZShwb3NpdGlvbiwgbG9va1Bvcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gT3V0IG9mIHJhbmdlPyBTa2lwLlxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkaXN0ID4gcmFuZ2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEluIHNoYWRvd3M/IFNraXAuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFuZ2xlVG8gPSB0aGlzLmFuZ2xlVG8ocG9zaXRpb24sIGxvb2tQb3MpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhbmd1bGFyU2l6ZSA9IHRoaXMuYW5ndWxhclNpemUocG9zaXRpb24sIGxvb2tQb3MpIC8gMjtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5TaGFkb3dzID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNJblNoYWRvd3MoYW5nbGVUbywgc2hhZG93cykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0luU2hhZG93cyhhbmdsZVRvICsgYW5ndWxhclNpemUsIHNoYWRvd3MpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNJblNoYWRvd3MoYW5nbGVUbyAtIGFuZ3VsYXJTaXplLCBzaGFkb3dzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpblNoYWRvd3MgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyBOb3csIHRlc3QgaWYgd2UgY2FuIHNlZSB0aHJvdWdoIHRoZSB0aWxlXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluU2hhZG93cyB8fCAhdGhpcy5jYW5TZWUobG9va1BvcykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3F1YXJlIGlzIG9wYXF1ZSEgQWRkIGl0cyBzaGFkb3dcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3U2hhZG93cy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0QW5nbGU6IGFuZ2xlVG8gLSBhbmd1bGFyU2l6ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZEFuZ2xlOiBhbmdsZVRvICsgYW5ndWxhclNpemVcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIEFkZCBuZXdTaGFkb3dzIHRvIHNoYWRvd3NcclxuICAgICAgICAgICAgd2hpbGUgKG5ld1NoYWRvd3MubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgLy8gc2hhZG93cy5wdXNoKG5ld1NoYWRvd3MucG9wKCkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb21iaW5lU2hhZG93KHNoYWRvd3MsIG5ld1NoYWRvd3MucG9wKCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHdlIHNob3VsZCBjYWxsIGl0IHF1aXRzXHJcbiAgICAgICAgICAgIGlmIChzaGFkb3dzLmxlbmd0aCA9PT0gMSAmJiBzaGFkb3dzWzBdLmVuZEFuZ2xlIC0gc2hhZG93c1swXS5zdGFydEFuZ2xlID49IDM2MCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIDtcclxuICAgIC8qKiBHZXQgYW5nbGUgYSB0aWxlIHJlc2lkZXMgaW5cclxuICAgICAqIFRoaXMgcmFuZ2VzIGZyb20gLTE4MCB0byAxODAsIHNvIGJlIGNhcmVmdWxcclxuICAgICovXHJcbiAgICBGT1YucHJvdG90eXBlLmFuZ2xlVG8gPSBmdW5jdGlvbiAoc3RhcnRQb3NpdGlvbiwgZW5kUG9zaXRpb24pIHtcclxuICAgICAgICB2YXIgeSA9IGVuZFBvc2l0aW9uWzFdIC0gc3RhcnRQb3NpdGlvblsxXTtcclxuICAgICAgICB2YXIgeCA9IGVuZFBvc2l0aW9uWzBdIC0gc3RhcnRQb3NpdGlvblswXTtcclxuICAgICAgICB2YXIgYW5nbGUgPSAxODAgKiBNYXRoLmF0YW4yKHksIHgpIC8gTWF0aC5QSTtcclxuICAgICAgICByZXR1cm4gKGFuZ2xlID49IDApID8gYW5nbGUgOiBhbmdsZSArIDM2MDtcclxuICAgIH07XHJcbiAgICA7XHJcbiAgICAvKiogR2V0IGFuZ3VsYXIgc2l6ZSBvZiBhIHNxdWFyZSAqL1xyXG4gICAgRk9WLnByb3RvdHlwZS5hbmd1bGFyU2l6ZSA9IGZ1bmN0aW9uIChzdGFydFBvc2l0aW9uLCBlbmRQb3NpdGlvbikge1xyXG4gICAgICAgIHZhciBkaXN0YW5jZSA9IHRoaXMuZGlzdGFuY2Uoc3RhcnRQb3NpdGlvbiwgZW5kUG9zaXRpb24pO1xyXG4gICAgICAgIHJldHVybiAzNjAgKiBNYXRoLmF0YW4oMSAvICgyICogZGlzdGFuY2UpKSAvIE1hdGguUEk7XHJcbiAgICB9O1xyXG4gICAgO1xyXG4gICAgLyoqIEdldCBkaXN0YW5jZSAqL1xyXG4gICAgRk9WLnByb3RvdHlwZS5kaXN0YW5jZSA9IGZ1bmN0aW9uIChzdGFydFBvc2l0aW9uLCBlbmRQb3NpdGlvbikge1xyXG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3coKGVuZFBvc2l0aW9uWzFdIC0gc3RhcnRQb3NpdGlvblsxXSksIDIpICsgTWF0aC5wb3coKGVuZFBvc2l0aW9uWzBdIC0gc3RhcnRQb3NpdGlvblswXSksIDIpKTtcclxuICAgIH07XHJcbiAgICAvKiogQ2hlY2sgaWYgaW4gc2hhZG93cyAqL1xyXG4gICAgRk9WLnByb3RvdHlwZS5pc0luU2hhZG93cyA9IGZ1bmN0aW9uIChhbmdsZSwgc2hhZG93cykge1xyXG4gICAgICAgIHZhciBuZWdBbmdsZSA9IGFuZ2xlIC0gMzYwO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgc2hhZG93c18xID0gc2hhZG93czsgX2kgPCBzaGFkb3dzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBzaGFkb3cgPSBzaGFkb3dzXzFbX2ldO1xyXG4gICAgICAgICAgICBpZiAoKGFuZ2xlIDw9IHNoYWRvdy5lbmRBbmdsZSAmJiBhbmdsZSA+PSBzaGFkb3cuc3RhcnRBbmdsZSkgfHwgKG5lZ0FuZ2xlIDw9IHNoYWRvdy5lbmRBbmdsZSAmJiBuZWdBbmdsZSA+PSBzaGFkb3cuc3RhcnRBbmdsZSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH07XHJcbiAgICAvKiogQWRkIGEgc2hhZG93IHRvIHRoZSBzaGFkb3cgYXJyYXkgKi9cclxuICAgIEZPVi5wcm90b3R5cGUuY29tYmluZVNoYWRvdyA9IGZ1bmN0aW9uIChzaGFkb3dzLCBuZXdTaGFkb3cpIHtcclxuICAgICAgICB2YXIgb3ZlckxhcEFyciA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2hhZG93cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgc2hhZG93ID0gc2hhZG93c1tpXTtcclxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhleSBvdmVybGFwXHJcbiAgICAgICAgICAgIGlmIChuZXdTaGFkb3cuc3RhcnRBbmdsZSA8IHNoYWRvdy5lbmRBbmdsZSAmJiBuZXdTaGFkb3cuZW5kQW5nbGUgPiBzaGFkb3cuc3RhcnRBbmdsZSkge1xyXG4gICAgICAgICAgICAgICAgbmV3U2hhZG93LnN0YXJ0QW5nbGUgPSBNYXRoLm1pbihzaGFkb3cuc3RhcnRBbmdsZSwgbmV3U2hhZG93LnN0YXJ0QW5nbGUpO1xyXG4gICAgICAgICAgICAgICAgbmV3U2hhZG93LmVuZEFuZ2xlID0gTWF0aC5tYXgoc2hhZG93LmVuZEFuZ2xlLCBuZXdTaGFkb3cuZW5kQW5nbGUpO1xyXG4gICAgICAgICAgICAgICAgb3ZlckxhcEFyci5wdXNoKGkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvdmVyTGFwQXJyLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgdmFyIG1haW5TaGFkb3cgPSBzaGFkb3dzW292ZXJMYXBBcnIuc2hpZnQoKV07XHJcbiAgICAgICAgICAgIG1haW5TaGFkb3cuc3RhcnRBbmdsZSA9IG5ld1NoYWRvdy5zdGFydEFuZ2xlO1xyXG4gICAgICAgICAgICBtYWluU2hhZG93LmVuZEFuZ2xlID0gbmV3U2hhZG93LmVuZEFuZ2xlO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gb3ZlckxhcEFyci5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgICAgICAgICAgc2hhZG93cy5zcGxpY2Uob3ZlckxhcEFycltpXSwgMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHNoYWRvd3MucHVzaChuZXdTaGFkb3cpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gRk9WO1xyXG59KCkpO1xyXG5leHBvcnQgZGVmYXVsdCBGT1Y7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUZPVi5qcy5tYXAiLCJ2YXIgX19zcHJlYWRBcnJheXMgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXlzKSB8fCBmdW5jdGlvbiAoKSB7XHJcbiAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcclxuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcclxuICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcclxuICAgICAgICAgICAgcltrXSA9IGFbal07XHJcbiAgICByZXR1cm4gcjtcclxufTtcclxuLyoqXHJcbiAqIEEgdGlsZSwgYXMgZGVmaW5lZCBmb3IgV2F2ZSBGdW5jdGlvbiBDb2xsYXBzZSBwdXJwb3Nlc1xyXG4gKi9cclxudmFyIFdmY1RpbGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBXZmNUaWxlKGlucHV0KSB7XHJcbiAgICAgICAgdGhpcy5jb250ZW50cyA9IGlucHV0Lm1hcChmdW5jdGlvbiAocm93KSB7IHJldHVybiBfX3NwcmVhZEFycmF5cyhyb3cpOyB9KTtcclxuICAgIH1cclxuICAgIC8qKiBDaGVjayBpZiB0d28gV2ZjVGlsZSdzIGFyZSBlcXVhbCwgdG8gcmVtb3ZlIGR1cGxpY2F0ZXMuICovXHJcbiAgICBXZmNUaWxlLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiAodGlsZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBhdGlibGUodGlsZSwgMCwgMCk7XHJcbiAgICB9O1xyXG4gICAgLyoqIENoZWNrIGlmIHR3byBXZmNUaWxlJ3MgYXJlIGNvbXBhdGlibGUgKGkuZS4gY2FuIGJlIG5laWdoYm91cnMpICovXHJcbiAgICBXZmNUaWxlLnByb3RvdHlwZS5jb21wYXRpYmxlID0gZnVuY3Rpb24gKHRpbGUsIHgsIHkpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb250ZW50cy5ldmVyeShmdW5jdGlvbiAocm93LCBqKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByb3cuZXZlcnkoZnVuY3Rpb24gKHZhbCwgaSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHhQb3MgPSBpICsgeDtcclxuICAgICAgICAgICAgICAgIHZhciB5UG9zID0gaiArIHk7XHJcbiAgICAgICAgICAgICAgICBpZiAoeFBvcyA+PSAwICYmIHlQb3MgPj0gMCAmJiB5UG9zIDwgdGlsZS5jb250ZW50cy5sZW5ndGggJiYgeFBvcyA8IHRpbGUuY29udGVudHNbeVBvc10ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbCA9PT0gdGlsZS5jb250ZW50c1t5UG9zXVt4UG9zXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKiogQ2hlY2sgaWYgdGhpcyB0aWxlIHdvcmsgd2l0aCBhIGdpdmVuIGNvbnN0cmFpbnQgKi9cclxuICAgIFdmY1RpbGUucHJvdG90eXBlLmNvbnN0cmFpbiA9IGZ1bmN0aW9uIChjb25zdHJhaW50LCB4LCB5KSB7XHJcbiAgICAgICAgaWYgKHkgPj0gMCAmJiB5IDwgdGhpcy5jb250ZW50cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgaWYgKHggPj0gMCAmJiB4IDwgdGhpcy5jb250ZW50c1t5XS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnRlbnRzW3ldW3hdID09PSBjb25zdHJhaW50O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBXZmNUaWxlO1xyXG59KCkpO1xyXG5leHBvcnQgZGVmYXVsdCBXZmNUaWxlO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1XZmNUaWxlLmpzLm1hcCIsInZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcclxuICAgIHZhciB0ID0ge307XHJcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcclxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59O1xyXG5pbXBvcnQgV2ZjVGlsZSBmcm9tICcuL1dmY1RpbGUuanMnO1xyXG5pbXBvcnQgUmFuZG9tIGZyb20gJy4uL3JhbmRvbS9SYW5kb20uanMnO1xyXG4vKipcclxuICogQ2xhc3MgdGhhdCBpbXBsZW1lbnRzIHRoZSBXYXZlIEZ1bmN0aW9uIENvbGxhcHNlIGFsZ29yaXRobS5cclxuICovXHJcbnZhciBXRkMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBXRkMocGFyYW1zKSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIHZhciBpbnB1dCA9IHBhcmFtcy5pbnB1dCwgX2IgPSBwYXJhbXMubiwgbiA9IF9iID09PSB2b2lkIDAgPyAxIDogX2IsIF9jID0gcGFyYW1zLm0sIG0gPSBfYyA9PT0gdm9pZCAwID8gbiA6IF9jLCBfZCA9IHBhcmFtcy5yZXBlYXRJbnB1dCwgcmVwZWF0SW5wdXQgPSBfZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfZCwgcmFuZG9tID0gcGFyYW1zLnJhbmRvbSwgcmVzdCA9IF9fcmVzdChwYXJhbXMsIFtcImlucHV0XCIsIFwiblwiLCBcIm1cIiwgXCJyZXBlYXRJbnB1dFwiLCBcInJhbmRvbVwiXSk7XHJcbiAgICAgICAgLy8gQ29udmVydCBpbnRvIGEgMmQgYXJyYXlcclxuICAgICAgICB2YXIgaW5wdXRJbWFnZSA9IGlucHV0Lm1hcChmdW5jdGlvbiAocm93KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygcm93ID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcm93LnNwbGl0KFwiXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJvdztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIFByb2Nlc3MgdGhlIGlucHV0IGltYWdlIGFuZCBzdG9yZSB0aGF0IGRhdGFcclxuICAgICAgICBfYSA9IHRoaXMucHJvY2Vzc0lucHV0KGlucHV0SW1hZ2UsIHJlcGVhdElucHV0LCBuLCBtKSwgdGhpcy5ydWxlcyA9IF9hWzBdLCB0aGlzLmZyZXF1ZW5jaWVzID0gX2FbMV07XHJcbiAgICAgICAgdGhpcy5uID0gbjtcclxuICAgICAgICB0aGlzLm0gPSBtO1xyXG4gICAgICAgIGlmICghcmFuZG9tKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmFuZG9tID0gbmV3IFJhbmRvbSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5yYW5kb20gPSByYW5kb207XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBNZXRob2QgdGhhdCBwcm9jZXNzZXMgdGhlIGltYWdlIHRvIGdlbmVyYXRlIGFkamFjZW5jeSBydWxlcyBhbmQgdGlsZSBmcmVxdWVuY2llcy5cclxuICAgICAqL1xyXG4gICAgV0ZDLnByb3RvdHlwZS5wcm9jZXNzSW5wdXQgPSBmdW5jdGlvbiAoaW5wdXQsIHJlcGVhdElucHV0LCBuLCBtKSB7XHJcbiAgICAgICAgLy8gR2V0IGRpbWVuc2lvbnNcclxuICAgICAgICAvLyBIZWlnaHQgaXMganVzdCB0aGUgbGVuZ3RoIG9mIHRoZSBhcnJheVxyXG4gICAgICAgIHZhciBoZWlnaHQgPSBpbnB1dC5sZW5ndGg7XHJcbiAgICAgICAgdmFyIGhlaWdodFRpbGVzID0gaGVpZ2h0IC0gKCghcmVwZWF0SW5wdXQpID8gKG0gLSAxKSA6IDApO1xyXG4gICAgICAgIC8vIFdpZHRoIGlzIHRoZSBtaW5pbXVtIGxlbmd0aCBvZiBhIHN1YmFycmF5OyBmb3JjZSBpdCB0byBiZSBzcXVhcmUuXHJcbiAgICAgICAgdmFyIHdpZHRoID0gTWF0aC5taW4uYXBwbHkoTWF0aCwgaW5wdXQubWFwKGZ1bmN0aW9uIChyb3cpIHsgcmV0dXJuIHJvdy5sZW5ndGg7IH0pKTtcclxuICAgICAgICB2YXIgd2lkdGhUaWxlcyA9IHdpZHRoIC0gKCghcmVwZWF0SW5wdXQpID8gKG4gLSAxKSA6IDApO1xyXG4gICAgICAgIC8vIEdldCBhbGwgdGlsZXMgaW4gdGhlIGlucHV0XHJcbiAgICAgICAgdmFyIHJhd1RpbGVzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB3aWR0aFRpbGVzOyBpKyspIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBoZWlnaHRUaWxlczsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGlsZUlucHV0ID0gW107XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciB5ID0gMDsgeSA8IG07IHkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByb3cgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgeVBvcyA9IChqICsgeSkgJSBoZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCBuOyB4KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHhQb3MgPSAoeCArIGkpICUgd2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdy5wdXNoKGlucHV0W3lQb3NdW3hQb3NdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGlsZUlucHV0LnB1c2gocm93KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciBuZXdUaWxlID0gbmV3IFdmY1RpbGUodGlsZUlucHV0KTtcclxuICAgICAgICAgICAgICAgIHJhd1RpbGVzLnB1c2gobmV3VGlsZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gRmlsdGVyIGRvd24sIHRvIGdldCByaWQgb2YgcmVwZWF0c1xyXG4gICAgICAgIHZhciB0aWxlcyA9IFtdO1xyXG4gICAgICAgIHZhciBmcmVxdWVuY2llcyA9IFtdO1xyXG4gICAgICAgIHJhd1RpbGVzLmZvckVhY2goZnVuY3Rpb24gKHRpbGUpIHtcclxuICAgICAgICAgICAgdmFyIGluZGV4ID0gdGlsZXMuZmluZEluZGV4KGZ1bmN0aW9uIChvdGhlclRpbGUpIHsgcmV0dXJuIG90aGVyVGlsZS5lcXVhbHModGlsZSk7IH0pO1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgZnJlcXVlbmNpZXNbaW5kZXhdLndlaWdodCsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGlsZXMucHVzaCh0aWxlKTtcclxuICAgICAgICAgICAgICAgIGZyZXF1ZW5jaWVzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbjogdGlsZSxcclxuICAgICAgICAgICAgICAgICAgICB3ZWlnaHQ6IDEsXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIE5leHQsIHdlIG5lZWQgYWRqYWNlbmN5IHJ1bGVzXHJcbiAgICAgICAgdmFyIHJ1bGVzID0gdGlsZXMubWFwKGZ1bmN0aW9uICh0aWxlKSB7XHJcbiAgICAgICAgICAgIC8vIEJlZ2luIGEgbmV3IHJ1bGUhXHJcbiAgICAgICAgICAgIHZhciBydWxlID0ge1xyXG4gICAgICAgICAgICAgICAgdXA6IFtdLFxyXG4gICAgICAgICAgICAgICAgZG93bjogW10sXHJcbiAgICAgICAgICAgICAgICBsZWZ0OiBbXSxcclxuICAgICAgICAgICAgICAgIHJpZ2h0OiBbXSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHRpbGUgaXMgY29tcGF0aWJsZSB3aXRoIGV2ZXJ5IG90aGVyIHRpbGUsIGluIHRoZSA0IGRpcmVjdGlvbnNcclxuICAgICAgICAgICAgdGlsZXMuZm9yRWFjaChmdW5jdGlvbiAob3RoZXJUaWxlLCBpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGlsZS5jb21wYXRpYmxlKG90aGVyVGlsZSwgLTEsIDApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcnVsZS5yaWdodC5wdXNoKGkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRpbGUuY29tcGF0aWJsZShvdGhlclRpbGUsIDEsIDApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcnVsZS5sZWZ0LnB1c2goaSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodGlsZS5jb21wYXRpYmxlKG90aGVyVGlsZSwgMCwgLTEpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcnVsZS5kb3duLnB1c2goaSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodGlsZS5jb21wYXRpYmxlKG90aGVyVGlsZSwgMCwgMSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBydWxlLnVwLnB1c2goaSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAvLyBEb25lLCByZXR1cm4gdGhlIGZpbmlzaGVkIHJ1bGVcclxuICAgICAgICAgICAgcmV0dXJuIHJ1bGU7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIFtydWxlcywgZnJlcXVlbmNpZXNdO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogR2VuZXJhdGUgYW4gb3V0cHV0IGltYWdlLlxyXG4gICAgICovXHJcbiAgICBXRkMucHJvdG90eXBlLmdlbmVyYXRlID0gZnVuY3Rpb24gKHBhcmFtcykge1xyXG4gICAgICAgIHZhciB3aWR0aCA9IHBhcmFtcy53aWR0aCwgaGVpZ2h0ID0gcGFyYW1zLmhlaWdodCwgcmVwZWF0T3V0cHV0ID0gcGFyYW1zLnJlcGVhdE91dHB1dCwgcmVzdCA9IF9fcmVzdChwYXJhbXMsIFtcIndpZHRoXCIsIFwiaGVpZ2h0XCIsIFwicmVwZWF0T3V0cHV0XCJdKTtcclxuICAgICAgICAvLyBJbml0aWFsaXplIHdpdGggYWxsIHRpbGVzIGJlaW5nIHBvc3NpYmxlXHJcbiAgICAgICAgdmFyIHdhdmVGdW5jdGlvbiA9IFtdO1xyXG4gICAgICAgIHZhciBlbnRyb3B5TGlzdCA9IFtdO1xyXG4gICAgICAgIHZhciBkb25lTGlzdCA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgaGVpZ2h0OyBqKyspIHtcclxuICAgICAgICAgICAgdmFyIHJvdyA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHdpZHRoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBjb2x1bW4gPSBbXTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIG51bSA9IDA7IG51bSA8IHRoaXMuZnJlcXVlbmNpZXMubGVuZ3RoOyBudW0rKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGNvdW50ID0gMDsgY291bnQgPCB0aGlzLmZyZXF1ZW5jaWVzW251bV0ud2VpZ2h0OyBjb3VudCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbi5wdXNoKG51bSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gU2FtZSBkYXRhIGlzIGluIGJvdGg7IG9uZSBpcyBqdXN0IGZvciBwb3NpdGlvbnMsIG9uZSBpcyBmb3Igc29ydGluZ1xyXG4gICAgICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogY29sdW1uLFxyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBbaSwgal0sXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgcm93LnB1c2gob3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICBlbnRyb3B5TGlzdC5wdXNoKG9wdGlvbnMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHdhdmVGdW5jdGlvbi5wdXNoKHJvdyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFRPRE86IEFkZCBzdGVwIGZvciBhcHBseWluZyBjb25zdHJhaW50cyB0byB0aGUgaW1hZ2VcclxuICAgICAgICAvLyBCZWdpbiB0aGUgbWFpbiBsb29wIVxyXG4gICAgICAgIC8vIFB1dCBhIGhhcmQgY2FwIG9uIHRoZSBkdXJhdGlvbiwgZG9uJ3Qgd2FudCB0byBmdWNrIHdpdGggc29tZW9uZXMgYnJvd3NlclxyXG4gICAgICAgIHZhciBjYXAgPSB3aWR0aCAqIGhlaWdodCArIDE7XHJcbiAgICAgICAgd2hpbGUgKGVudHJvcHlMaXN0Lmxlbmd0aCA+IDAgJiYgY2FwID49IDApIHtcclxuICAgICAgICAgICAgLy8gU29ydCB0aGUgZW50cm9weUxpc3QsIHRvIHB1dCB0aGUgb3B0aW9uIHdpdGggZmV3ZXN0IHBvc3NpYmlsaXRpZXMgZmlyc3RcclxuICAgICAgICAgICAgZW50cm9weUxpc3Quc29ydChmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGEub3B0aW9ucy5sZW5ndGggLSBiLm9wdGlvbnMubGVuZ3RoO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgLy8gR2V0IHRoZSBmaXJzdCBzZXQgb2Ygb3B0aW9uc1xyXG4gICAgICAgICAgICB2YXIgb3B0aW9ucyA9IGVudHJvcHlMaXN0LnNoaWZ0KCk7XHJcbiAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSBpdCdzIGxlbmd0aCBpcyBub3QgMC4gSWYgaXQgaXMsIHdlIGZ1Y2tlZCB1cC5cclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMub3B0aW9ucy5sZW5ndGggPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgLy8gVE9ETzogT3RoZXIgb3B0aW9ucyBmb3IgZmFpbHVyZSAobWF5YmUgYSBkZWZhdWx0IHRpbGU/IFVnbHkgYnV0IG5vdCB0ZXJyaWJsZSBmb3IgYSByb2d1ZWxpa2UpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBDaG9vc2UgYW4gb3B0aW9uO1xyXG4gICAgICAgICAgICB2YXIgY2hvaWNlID0gW3RoaXMucmFuZG9tLmdldFJhbmRvbUVsZW1lbnQob3B0aW9ucy5vcHRpb25zKV07XHJcbiAgICAgICAgICAgIG9wdGlvbnMub3B0aW9ucyA9IGNob2ljZTtcclxuICAgICAgICAgICAgZG9uZUxpc3QucHVzaChvcHRpb25zKTtcclxuICAgICAgICAgICAgLy8gUHJvcGFnYXRlIHRoYXQgY2hvaWNlIHRvIHRoZSBvdGhlciB0aWxlc1xyXG4gICAgICAgICAgICB0aGlzLmFwcGx5QWRqYWNlbmN5KHdhdmVGdW5jdGlvbiwgb3B0aW9ucy5wb3NpdGlvbiwgcmVwZWF0T3V0cHV0KTtcclxuICAgICAgICAgICAgLy8gUmVkdWNlIHRoZSBjYXAgdG8gYXZvaWQgaW5maW5pdGUgbG9vcGluZy5cclxuICAgICAgICAgICAgY2FwLS07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLnBvc3RQcm9jZXNzKHdhdmVGdW5jdGlvbik7XHJcbiAgICB9O1xyXG4gICAgLyoqIENvbnZlcnQgdGhlIGFycmF5IG9mIG51bWJlcnMgaW50byB0aGUgZGVzaXJlZCBvdXRwdXQgKi9cclxuICAgIFdGQy5wcm90b3R5cGUucG9zdFByb2Nlc3MgPSBmdW5jdGlvbiAod2F2ZUZ1bmN0aW9uKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgaGVpZ2h0ID0gd2F2ZUZ1bmN0aW9uLmxlbmd0aCArICh0aGlzLm0gLSAxKTtcclxuICAgICAgICB2YXIgd2lkdGggPSB3YXZlRnVuY3Rpb24ubGVuZ3RoICsgKHRoaXMubiAtIDEpO1xyXG4gICAgICAgIHZhciBvdXRwdXQgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGhlaWdodDsgaisrKSB7XHJcbiAgICAgICAgICAgIHZhciByb3cgPSBbXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB3aWR0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICByb3cucHVzaChudWxsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvdXRwdXQucHVzaChyb3cpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB3YXZlRnVuY3Rpb24uZm9yRWFjaChmdW5jdGlvbiAocm93LCBqKSB7XHJcbiAgICAgICAgICAgIHJvdy5mb3JFYWNoKGZ1bmN0aW9uIChvcHRpb24sIGkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChvcHRpb24ub3B0aW9ucy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRpbGUgPSBfdGhpcy5mcmVxdWVuY2llc1tvcHRpb24ub3B0aW9uc1swXV0ub3B0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgX3RoaXMubjsgeCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHkgPSAwOyB5IDwgX3RoaXMubTsgeSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRbaiArIHldW2kgKyB4XSA9IHRpbGUuY29udGVudHNbeV1beF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBvdXRwdXQ7XHJcbiAgICB9O1xyXG4gICAgLyoqIEFwcGx5IGFkamFjZW5jeSBydWxlcyAqL1xyXG4gICAgV0ZDLnByb3RvdHlwZS5hcHBseUFkamFjZW5jeSA9IGZ1bmN0aW9uICh3YXZlRnVuY3Rpb24sIF9hLCByZXBlYXRPdXRwdXQsIGJhY2tUcmFjaykge1xyXG4gICAgICAgIHZhciB4ID0gX2FbMF0sIHkgPSBfYVsxXTtcclxuICAgICAgICBpZiAoYmFja1RyYWNrID09PSB2b2lkIDApIHsgYmFja1RyYWNrID0gZmFsc2U7IH1cclxuICAgICAgICB2YXIgdG9Eb1RpbGVzID0gW3dhdmVGdW5jdGlvblt5XVt4XV07XHJcbiAgICAgICAgdmFyIGRvbmVUaWxlcyA9IFtdO1xyXG4gICAgICAgIHdoaWxlICh0b0RvVGlsZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICB2YXIgZG9UaWxlID0gdG9Eb1RpbGVzLnBvcCgpO1xyXG4gICAgICAgICAgICB0aGlzLnByb3BvZ2F0ZSh3YXZlRnVuY3Rpb24sIGRvVGlsZS5wb3NpdGlvbiwgcmVwZWF0T3V0cHV0LCBkb25lVGlsZXMpLmZvckVhY2goZnVuY3Rpb24gKG5ld1RpbGUpIHtcclxuICAgICAgICAgICAgICAgIHRvRG9UaWxlcy5wdXNoKG5ld1RpbGUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKCFiYWNrVHJhY2spIHtcclxuICAgICAgICAgICAgICAgIGRvbmVUaWxlcy5wdXNoKGRvVGlsZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqIEluZGl2aWR1YWwgcHJvcG9nYXRpb24gc3RlcCAqL1xyXG4gICAgV0ZDLnByb3RvdHlwZS5wcm9wb2dhdGUgPSBmdW5jdGlvbiAod2F2ZUZ1bmN0aW9uLCBfYSwgcmVwZWF0T3V0cHV0LCBpZ25vcmVMaXN0KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgeCA9IF9hWzBdLCB5ID0gX2FbMV07XHJcbiAgICAgICAgaWYgKGlnbm9yZUxpc3QgPT09IHZvaWQgMCkgeyBpZ25vcmVMaXN0ID0gW107IH1cclxuICAgICAgICB2YXIgb3B0aW9ucyA9IHdhdmVGdW5jdGlvblt5XVt4XTtcclxuICAgICAgICB2YXIgYWdncmVnYXRlUnVsZXMgPSB7XHJcbiAgICAgICAgICAgIHVwOiBbXSxcclxuICAgICAgICAgICAgZG93bjogW10sXHJcbiAgICAgICAgICAgIGxlZnQ6IFtdLFxyXG4gICAgICAgICAgICByaWdodDogW10sXHJcbiAgICAgICAgfTtcclxuICAgICAgICAvLyBHZXQgYWxsIGF2YWlsYWJsZSBwb3NzaWJpbGl0aWVzXHJcbiAgICAgICAgb3B0aW9ucy5vcHRpb25zLmZvckVhY2goZnVuY3Rpb24gKG9wdGlvbikge1xyXG4gICAgICAgICAgICB2YXIgcnVsZSA9IF90aGlzLnJ1bGVzW29wdGlvbl07XHJcbiAgICAgICAgICAgIHJ1bGUudXAuZm9yRWFjaChmdW5jdGlvbiAoeCkgeyByZXR1cm4gYWdncmVnYXRlUnVsZXMudXAucHVzaCh4KTsgfSk7XHJcbiAgICAgICAgICAgIHJ1bGUuZG93bi5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7IHJldHVybiBhZ2dyZWdhdGVSdWxlcy5kb3duLnB1c2goeCk7IH0pO1xyXG4gICAgICAgICAgICBydWxlLmxlZnQuZm9yRWFjaChmdW5jdGlvbiAoeCkgeyByZXR1cm4gYWdncmVnYXRlUnVsZXMubGVmdC5wdXNoKHgpOyB9KTtcclxuICAgICAgICAgICAgcnVsZS5yaWdodC5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7IHJldHVybiBhZ2dyZWdhdGVSdWxlcy5yaWdodC5wdXNoKHgpOyB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBSZW1vdmUgZHVwbGljYXRlc1xyXG4gICAgICAgIGFnZ3JlZ2F0ZVJ1bGVzLnVwID0gYWdncmVnYXRlUnVsZXMudXAuZmlsdGVyKGZ1bmN0aW9uICh4LCBpLCBhcnIpIHsgcmV0dXJuIGFyci5pbmRleE9mKHgpID09PSBpOyB9KTtcclxuICAgICAgICBhZ2dyZWdhdGVSdWxlcy5kb3duID0gYWdncmVnYXRlUnVsZXMuZG93bi5maWx0ZXIoZnVuY3Rpb24gKHgsIGksIGFycikgeyByZXR1cm4gYXJyLmluZGV4T2YoeCkgPT09IGk7IH0pO1xyXG4gICAgICAgIGFnZ3JlZ2F0ZVJ1bGVzLmxlZnQgPSBhZ2dyZWdhdGVSdWxlcy5sZWZ0LmZpbHRlcihmdW5jdGlvbiAoeCwgaSwgYXJyKSB7IHJldHVybiBhcnIuaW5kZXhPZih4KSA9PT0gaTsgfSk7XHJcbiAgICAgICAgYWdncmVnYXRlUnVsZXMucmlnaHQgPSBhZ2dyZWdhdGVSdWxlcy5yaWdodC5maWx0ZXIoZnVuY3Rpb24gKHgsIGksIGFycikgeyByZXR1cm4gYXJyLmluZGV4T2YoeCkgPT09IGk7IH0pO1xyXG4gICAgICAgIC8vIE1haW50YWluIGxpc3Qgb2YgbmV4dCB0aWxlcyB0byBnbyB0b1xyXG4gICAgICAgIHZhciBuZXh0VGlsZXMgPSBbXTtcclxuICAgICAgICAvLyBBcHBseSBmb3IgZWFjaCBkaXJlY3Rpb25cclxuICAgICAgICB2YXIgc3RlcHMgPSBbXCJ1cFwiLCBcImRvd25cIiwgXCJsZWZ0XCIsIFwicmlnaHRcIl07XHJcbiAgICAgICAgdmFyIHN0ZXBEaXJlY3Rpb25zID0ge1xyXG4gICAgICAgICAgICB1cDogWzAsIC0xXSxcclxuICAgICAgICAgICAgZG93bjogWzAsIDFdLFxyXG4gICAgICAgICAgICBsZWZ0OiBbLTEsIDBdLFxyXG4gICAgICAgICAgICByaWdodDogWzEsIDBdLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgc3RlcHMuZm9yRWFjaChmdW5jdGlvbiAoc3RlcCkge1xyXG4gICAgICAgICAgICB2YXIgeHggPSB4ICsgc3RlcERpcmVjdGlvbnNbc3RlcF1bMF07XHJcbiAgICAgICAgICAgIHZhciB5eSA9IHkgKyBzdGVwRGlyZWN0aW9uc1tzdGVwXVsxXTtcclxuICAgICAgICAgICAgaWYgKHJlcGVhdE91dHB1dCkge1xyXG4gICAgICAgICAgICAgICAgeHggKz0gd2F2ZUZ1bmN0aW9uWzBdLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIHh4ID0geHggJSB3YXZlRnVuY3Rpb25bMF0ubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgeXkgKz0gd2F2ZUZ1bmN0aW9uLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIHl5ID0geXkgJSB3YXZlRnVuY3Rpb24ubGVuZ3RoO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh4eCA+PSAwICYmIHh4IDwgd2F2ZUZ1bmN0aW9uWzBdLmxlbmd0aCAmJiB5eSA+PSAwICYmIHl5IDwgd2F2ZUZ1bmN0aW9uLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGlnbm9yZUxpc3QuaW5jbHVkZXMod2F2ZUZ1bmN0aW9uW3l5XVt4eF0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIGJlZm9yZUxlbmd0aCA9IHdhdmVGdW5jdGlvblt5eV1beHhdLm9wdGlvbnMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgd2F2ZUZ1bmN0aW9uW3l5XVt4eF0ub3B0aW9ucyA9IHdhdmVGdW5jdGlvblt5eV1beHhdLm9wdGlvbnMuZmlsdGVyKGZ1bmN0aW9uICh4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFnZ3JlZ2F0ZVJ1bGVzW3N0ZXBdLmluY2x1ZGVzKHgpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoYmVmb3JlTGVuZ3RoID4gd2F2ZUZ1bmN0aW9uW3l5XVt4eF0ub3B0aW9ucy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyB0aGlzLnByb3BvZ2F0ZSh3YXZlRnVuY3Rpb24sW3h4LHl5XSxyZXBlYXRPdXRwdXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHRUaWxlcy5wdXNoKHdhdmVGdW5jdGlvblt5eV1beHhdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBuZXh0VGlsZXM7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFdGQztcclxufSgpKTtcclxuZXhwb3J0IGRlZmF1bHQgV0ZDO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1XRkMuanMubWFwIiwiaW1wb3J0IHsgRGlzcGxheSwgRXZlbnRNYW5hZ2VyLCBSYW5kb20sIFBhdGhGaW5kZXIsIEZPViwgV0ZDIH0gZnJvbSAnLi4vbGliL2luZGV4JztcclxuXHJcbi8vIEZpcnN0LCBzZWxlY3QgdGhlIHRhcmdldCBlbGVtZW50IHlvdSB3YW50IHRoZSBkaXNwbGF5IHRvIGJlIHdpdGhpblxyXG5jb25zdCB0YXJnZXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRpc3BsYXlFeGFtcGxlXCIpO1xyXG5cclxuLy8gUGFyYW1hdGVycyBvYmplY3RcclxuY29uc3QgcGFyYW1zID0ge1xyXG4gICAgLy8gUmVxdWlyZWQhIFRoZSBkaXNwbGF5IG11c3QgZ28gc29tZXdoZXJlXHJcbiAgICB0YXJnZXQ6IHRhcmdldCxcclxuICAgIC8vIFdpZHRoIG9mIHRoZSBkaXNwbGF5IGluIHRpbGVzXHJcbiAgICB3aWR0aDogMjAsXHJcbiAgICAvLyBIZWlnaHQgb2YgdGhlIGRpc3BsYXkgaW4gdGlsZXNcclxuICAgIGhlaWdodDogMTUsXHJcbn07XHJcblxyXG4vLyBTdGFydCB0aGUgZGlzcGxheSFcclxuY29uc3QgZGlzcGxheSA9IG5ldyBEaXNwbGF5KHBhcmFtcyk7XHJcblxyXG4vLyBTZXQgdGhlIHRpbGUgc2l6ZSBzbyB0aGF0IGl0IGZpdHMgaXRzIGNvbnRhaW5lclxyXG5kaXNwbGF5LnRpbGVTaXplID0gZGlzcGxheS5jYWxjdWxhdGVUaWxlU2l6ZSgpO1xyXG5cclxuLy8gT25lIGNvb2wgdGhpbmcgeW91IGNhbiBkbyBpcyBhZGQgYSBsaXN0ZW5lciBmb3Igd2luZG93IHJlc2l6aW5nXHJcbi8vIEtlZXAgeW91ciBkaXNwbGF5IGxvb2tpbmcgZ29vZCFcclxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwoKT0+e1xyXG4gICAgZGlzcGxheS50aWxlU2l6ZSA9IGRpc3BsYXkuY2FsY3VsYXRlVGlsZVNpemUoKTtcclxufSk7XHJcblxyXG4vLyBMZXRzIGRyYXcgc29tZSBzdHVmZlxyXG5mb3IgKGxldCB4PTA7IHggPCBwYXJhbXMud2lkdGg7IHgrKykge1xyXG4gICAgZm9yIChsZXQgeT0wOyB5IDwgcGFyYW1zLmhlaWdodDsgeSsrKSB7XHJcbiAgICAgICAgLy8gRHJhdyBzb21lIHdhbGxzXHJcbiAgICAgICAgaWYgKHg9PT0wIHx8IHk9PT0wIHx8IHg9PT1wYXJhbXMud2lkdGgtMSB8fCB5PT09cGFyYW1zLmhlaWdodC0xKSB7XHJcbiAgICAgICAgICAgIGRpc3BsYXkuc2V0VGlsZSh4LHkse1xyXG4gICAgICAgICAgICAgICAgLy8gQ29udGVudCBjYW4gYmUgYSBzdHJpbmcsIG9yIEFOWSBodG1sIGVsZW1lbnQhIChpbmNsdWRpbmcgaW1hZ2VzISlcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICcjJyxcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJicmlja1dhbGxcIlxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gQWRkIG91ciBwbGF5ZXIhXHJcbiAgICAgICAgfSBlbHNlIGlmICh4PT09MyAmJiB5PT09NSkge1xyXG4gICAgICAgICAgICBkaXNwbGF5LnNldFRpbGUoeCx5LHtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICdAJyxcclxuICAgICAgICAgICAgICAgIC8vIFlvdSBjYW4gdXNlIGFzIG1hbnkgY2xhc3NlcyBhcyB5b3Ugd291bGQgbGlrZSFcclxuICAgICAgICAgICAgICAgIGNsYXNzTGlzdDogW1wicGxheWVyXCJdXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIC8vIFNvbWUgZmxvb3IgZXZlcnl3aGVyZSBlbHNlXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZGlzcGxheS5zZXRUaWxlKHgseSx7XHJcbiAgICAgICAgICAgICAgICBjb250ZW50OiAnLicsXHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiY29vbEZsb29yXCJcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4vLyBIbW0gYWN0dWFsbHkgSSB3YW50IHRvIGNoYW5nZSBzb21lIG9mIHRoZSB0aWxlcyBhIGJpdC4gdXBkYXRlVGlsZSBjaGFuZ2VzIHRoZVxyXG4vLyBwYXJhbWV0ZXJzIHRoYXQgeW91IHNwZWNpZnk7IHNldFRpbGUgcmVwbGFjZXMgZXZlcnl0aGluZy5cclxuXHJcbmZvciAobGV0IGk9NTsgaSA8IDEwOyBpKyspIHtcclxuICAgIGRpc3BsYXkudXBkYXRlVGlsZShpLGkse2NsYXNzTmFtZTpcInN1cGVyQXdlc29tZVwifSk7XHJcbn1cclxuXHJcbmNvbnN0IHJhbmRvbVN0dWZmID0gKCk9PntcclxuICAgIC8vIFlvdSBjYW4gZGVmaW5lIGEgc2VlZCBpZiB5b3Ugd291bGQgbGlrZTsgaWYgbm90LCB0aGUgY3VycmVudCB0aW1lIGlzIHVzZWQuXHJcbiAgICBjb25zdCBvcHRpb25hbFNlZWQgPSBNYXRoLmZsb29yKERhdGUubm93KCkpO1xyXG4gICAgXHJcbiAgICAvLyBTdGFydCB0aGUgcmFuZG9tIG51bWJlciBnZW5lcmF0b3JcclxuICAgIGNvbnN0IHJhbmRvbSA9IG5ldyBSYW5kb20ob3B0aW9uYWxTZWVkKTtcclxuICAgIFxyXG4gICAgLy8gSWYgeW91IHdhbnQgYSByYW5kb20gbnVtYmVyIGZyb20gMCA8PSB4IDwgMTpcclxuICAgIGNvbnN0IHggPSByYW5kb20uZ2V0UmFuZG9tKCk7XHJcbiAgICBcclxuICAgIC8vIElmIHlvdSB3b3VsZCBsaWtlIGEgcmFuZG9tIG51bWJlciBpbiB0aGUgcmFuZ2Ugb2YgbG93ZXIgPD0geSA8PSB1cHBlciB5b3UgY2FuIHVzZSBnZXROdW1iZXIuXHJcbiAgICBjb25zdCBsb3dlciA9IDA7XHJcbiAgICBjb25zdCB1cHBlciA9IDEwO1xyXG4gICAgY29uc3QgeSA9IHJhbmRvbS5nZXROdW1iZXIobG93ZXIsdXBwZXIpO1xyXG4gICAgXHJcbiAgICAvLyBJZiB0aGUgZ2l2ZW4gYm91bmRzIGFyZSBpbnRlZ2VycywgaXQgd2lsbCBnZW5lcmF0ZSBpbnRlZ2Vycy5cclxuICAgIC8vIElmIG5vdCwgaXQgd2lsbCBnZW5lcmF0ZSBkZWNpbWFscy5cclxuICAgIC8vIElmIHlvdSB3YW50IHRvIHNwZWNpZnkgZXhwbGljaXRseSwgdXNlIHRoZSBpbnRlZ2VyIGJvb2xlYW4gcGFyYW1ldGVyLlxyXG4gICAgY29uc3Qgbm9UaGFua3NOb3RJbnRlZ2VyID0gcmFuZG9tLmdldE51bWJlcihsb3dlcix1cHBlcixmYWxzZSk7XHJcbiAgICBcclxuICAgIC8vIElmIHlvdSB3YW50IGEgcmFuZG9tIGVsZW1lbnQgZnJvbSBhbiBhcnJheSwgdXNlIGdldFJhbmRvbUVsZW1lbnQuXHJcbiAgICBjb25zdCBjb29sQXJyYXkgPSBbMSwgMiwgMywgNCwgNSwgNiwgN107XHJcbiAgICBjb25zdCByYW5kb21FbGVtZW50ID0gcmFuZG9tLmdldFJhbmRvbUVsZW1lbnQoY29vbEFycmF5KTtcclxuICAgIFxyXG4gICAgLy8gSWYgeW91IHdhbnQgdG8gcHJvdmlkZSB3ZWlnaHRzIGZvciBlYWNoIHZhbHVlLCB5b3UgY2FuIHVzZSBnZXRXZWlnaHRlZEVsZW1lbnQuXHJcbiAgICBjb25zdCB3ZWlnaHRlZEFycmF5ID0gW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgd2VpZ2h0OiAxMCxcclxuICAgICAgICAgICAgb3B0aW9uOiBcIkN1dGUgZG9nXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgd2VpZ2h0OiAxNSxcclxuICAgICAgICAgICAgb3B0aW9uOiBcIkF3ZXNvbWUgY2F0XCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgd2VpZ2h0OiAxLFxyXG4gICAgICAgICAgICBvcHRpb246IFwiUmFyZSBGcmFua2xpblwiXHJcbiAgICAgICAgfVxyXG4gICAgXTtcclxuICAgIFxyXG4gICAgY29uc3QgcmFuZG9tV2VpZ2h0ZWRFbGVtZW50ID0gcmFuZG9tLmdldFdlaWdodGVkRWxlbWVudCh3ZWlnaHRlZEFycmF5KTtcclxuICAgIFxyXG4gICAgY29uc3QgcmVzdWx0c0xpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJhbmRvbVJlc3VsdHNcIik7XHJcblxyXG4gICAgLy8gQ2xlYXIgaXQgb3V0LCB0aGVuIGZpbGwgaXQgdXAgYWdhaW5cclxuICAgIHdoaWxlKHJlc3VsdHNMaXN0Lmxhc3RDaGlsZCkge1xyXG4gICAgICAgIHJlc3VsdHNMaXN0LnJlbW92ZUNoaWxkKHJlc3VsdHNMaXN0Lmxhc3RDaGlsZCk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGNvbnN0IGF0dGFjaFJlc3VsdCA9IGZ1bmN0aW9uIChuYW1lLCByZXN1bHQpIHtcclxuICAgICAgICBjb25zdCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKTtcclxuICAgICAgICBjb25zdCB0ZXh0ID0gYCR7bmFtZX0gOiAke3Jlc3VsdH1gO1xyXG4gICAgICAgIGxpLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRleHQpKTtcclxuICAgICAgICByZXN1bHRzTGlzdC5hcHBlbmRDaGlsZChsaSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGF0dGFjaFJlc3VsdChcInhcIiwgeC50b1N0cmluZygpKTtcclxuICAgIGF0dGFjaFJlc3VsdChcInlcIiwgeS50b1N0cmluZygpKTtcclxuICAgIGF0dGFjaFJlc3VsdChcIm5vVGhhbmtzTm90SW50ZWdlclwiLCBub1RoYW5rc05vdEludGVnZXIudG9TdHJpbmcoKSk7XHJcbiAgICBhdHRhY2hSZXN1bHQoXCJyYW5kb21FbGVtZW50XCIsIHJhbmRvbUVsZW1lbnQudG9TdHJpbmcoKSk7XHJcbiAgICBhdHRhY2hSZXN1bHQoXCJyYW5kb21XZWlnaHRlZEVsZW1lbnRcIiwgcmFuZG9tV2VpZ2h0ZWRFbGVtZW50LnRvU3RyaW5nKCkpO1xyXG59XHJcblxyXG4vLyBEbyBpdCBvbmNlIG9uIHBhZ2UgbG9hZFxyXG5yYW5kb21TdHVmZigpO1xyXG5cclxuLy8gQXR0YWNoIGl0IHRvIGEgYnV0dG9uIHNvIHRoZSByZWFkZXIgY2FuIHB1c2ggaXRcclxuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyYW5kb21CdXR0b25cIikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIscmFuZG9tU3R1ZmYpO1xyXG5cclxuLy8gQ29sb3JmdWwgZGlzcGxheSwgaG9vcmF5XHJcbmNvbnN0IGNvbG9yVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jb2xvckRpc3BsYXlcIik7XHJcblxyXG4vLyBJbml0aWFsaXplIGl0XHJcbmNvbnN0IGNvbG9yRGlzcGxheSA9IG5ldyBEaXNwbGF5KHt0YXJnZXQ6Y29sb3JUYXJnZXQsIHdpZHRoOiAxMCwgaGVpZ2h0OiAxMH0pO1xyXG5cclxuLy8gRHJhdyBzb21lIHN0dWZmXHJcbmZvcihsZXQgaT0wO2k8MTA7aSsrKSB7XHJcbiAgICBmb3IobGV0IGo9MDtqPDEwO2orKykge1xyXG4gICAgICAgIGlmIChpPT09MCB8fCBqPT09MCB8fCBpPT09OSB8fCBqPT09OSkge1xyXG4gICAgICAgICAgICAvLyBEaWQgeW91IGtub3cgeW91IGNhbiB1c2UgYSBzaG9ydGhhbmQgaGVyZT8gTm93IHlvdSBkbyFcclxuICAgICAgICAgICAgY29sb3JEaXNwbGF5LnNldFRpbGUoaSxqLCcjJyk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChpPT09MyAmJiBqPT09Mykge1xyXG4gICAgICAgICAgICBjb2xvckRpc3BsYXkuc2V0VGlsZShpLGosJ0AnKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGk9PT00ICYmIGo9PT01KSB7XHJcbiAgICAgICAgICAgIGNvbG9yRGlzcGxheS5zZXRUaWxlKGksaix7XHJcbiAgICAgICAgICAgICAgICBjb250ZW50OiAnZycsXHJcbiAgICAgICAgICAgICAgICAvLyBZb3UgY2FuIHVzZSBpbmxpbmUgY29sb3JzIGFuZCBiYWNrZ3JvdW5kcyBpZlxyXG4gICAgICAgICAgICAgICAgLy8geW91IFJFQUxMWSB3YW50IHRvLCBidXQgSSBkaXNjb3VyYWdlIGl0LlxyXG4gICAgICAgICAgICAgICAgY29sb3I6ICdncmVlbicsXHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAncmdiYSgxMjgsMCwwLDAuMiknLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb2xvckRpc3BsYXkuc2V0VGlsZShpLGosJy4nKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIE1ha2UgdGhlIGRpc3BsYXkgZml0IHRoZSBjb250YWluZXJcclxuY29sb3JEaXNwbGF5LnRpbGVTaXplID0gY29sb3JEaXNwbGF5LmNhbGN1bGF0ZVRpbGVTaXplKCk7XHJcblxyXG4vLyBDZW50ZXIgaXQgb24gdGhlIHBsYXllclxyXG5jb2xvckRpc3BsYXkuY2VudGVyRGlzcGxheSgzLDMpO1xyXG5cclxuLy8gSGVyZSdzIGEgY29vbCBtYXAgdG8gbGl2ZSBpblxyXG5jb25zdCBtYXAgPSBbXHJcbiAgICBcIiMjIyMjIyMjIyMjIyMjIyMjIyMjXCIsXHJcbiAgICBcIiMuLi4uLi4uLi4uLi4uLi4uLi4jXCIsXHJcbiAgICBcIiMuLiMuLi4uLiMuLi4uIy4uLi4jXCIsXHJcbiAgICBcIiMuLiMuLi4uLiMjIy4uLiMjLi4jXCIsXHJcbiAgICBcIiMuLiMuLi4uLiMuLi4uLi4uLi4jXCIsXHJcbiAgICBcIiMuLi4uLi4uLi4uLi4uIyMjIy4jXCIsXHJcbiAgICBcIiMuLi4uLi4uLiMuLi4uIy4uLi4jXCIsXHJcbiAgICBcIiMjIyMuLi4jIyMuLi4uIy4uLi4jXCIsXHJcbiAgICBcIiMuLi4uLi4uLiMuLi4uIy4uLi4jXCIsXHJcbiAgICBcIiMjIyMjIyMjIyMjIyMjIyMjIyMjXCIsXHJcbl07XHJcbmNvbnN0IHdpZHRoID0gbWFwWzBdLmxlbmd0aDtcclxuY29uc3QgaGVpZ2h0ID0gbWFwLmxlbmd0aDtcclxuXHJcbi8vIEFuZCBsZXRzIHN0YXJ0IHVwIGEgZGlzcGxheSB0byB1c2VcclxuY29uc3QgZm92RGlzcGxheVBhcmFtcyA9IHtcclxuICAgIHRhcmdldDogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJmb3ZNYXBcIiksXHJcbiAgICB3aWR0aDogd2lkdGgsXHJcbiAgICBoZWlnaHQ6IGhlaWdodCxcclxufTtcclxuY29uc3QgZm92RGlzcGxheSA9IG5ldyBEaXNwbGF5KGZvdkRpc3BsYXlQYXJhbXMpO1xyXG5mb3ZEaXNwbGF5LnRpbGVTaXplID0gZm92RGlzcGxheS5jYWxjdWxhdGVUaWxlU2l6ZSgpO1xyXG5cclxuLy8gRk9WIHRha2VzIGEgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCBkZWNpZGVzIHdoZXRoZXIgb3Igbm90IHlvdSBjYW4gc2VlIHNvbWV0aGluZy5cclxuLy8gSXQgdGFrZXMgb25lIHBhcmFtZXRlciwgd2hpY2ggaXMgYSB0d28gZWxlbWVudCBwb3NpdGlvbiBhcnJheSBwb3MgPSBbeCx5XVxyXG4vLyBhbmQgcmV0dXJucyB0cnVlIG9yIGZhbHNlLlxyXG5jb25zdCBjYW5TZWUgPSAocG9zaXRpb24pID0+IHtcclxuICAgIGNvbnN0IHggPSBwb3NpdGlvblswXTtcclxuICAgIGNvbnN0IHkgPSBwb3NpdGlvblsxXTtcclxuXHJcbiAgICAvLyBNYWtlIHN1cmUgaXQncyBldmVuIG9uIHRoZSBtYXBcclxuICAgIGlmICggeDwwIHx8IHg+PXdpZHRoIHx8IHk8MCB8fCB5Pj1oZWlnaHQpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBjb25zdCB0aWxlID0gbWFwW3ldW3hdO1xyXG5cclxuICAgIC8vIEZpcnN0LCByZWdhcmRsZXNzIG9mIHN1Y2Nlc3Mgb3Igbm90LCBzZWUgdGhpcyB0aWxlXHJcbiAgICBmb3ZEaXNwbGF5LnNldFRpbGUoeCx5LHRpbGUpO1xyXG5cclxuICAgIC8vIE5leHQsIHVzZSB3aGF0ZXZlciBjcml0ZXJpYSB3ZSB3YW50IHRvIGRlY2lkZSBpZiBpdCBpcyBzZWV0aHJvdWdoIG9yIG5vdC5cclxuICAgIC8vIEluIHRoaXMgY2FzZSwgaWYgaXQncyBub3QgYSB3YWxsIChvciAjIGNoYXJhY3RlciksIHdlIGNhbiBzZWUgdGhyb3VnaCBpdC5cclxuICAgIHJldHVybiB0aWxlICE9PSAnIyc7XHJcbn1cclxuXHJcbi8vIEl0IGhhcyBhbiBvcHRpb25hbCBzZWNvbmQgcGFyYW1ldGVyIGZvciBkaXN0YW5jZS4gVGhlIGRlZmF1bHQgaXMgOC5cclxuY29uc3Qgb3B0aW9uYWxSYW5nZSA9IDIwO1xyXG5cclxuLy8gSW5pdGlhbGl6ZSB0aGUgRk9WIG9iamVjdCFcclxuY29uc3QgZm92ID0gbmV3IEZPVihjYW5TZWUsIG9wdGlvbmFsUmFuZ2UpO1xyXG5cclxuLy8gQ2hvb3NlIGEgcG9zaXRpb24gZm9yIHRoZSBwbGF5ZXIgdG8gYmVcclxuY29uc3QgcGxheWVyUG9zID0gWzUsNV07XHJcblxyXG4vLyBTbGlnaHRseSBoYWNreSB3YXkgdG8gYWRkIHRoZSBwbGF5ZXI7IHVzZSBhIGJldHRlciBkYXRhIHN0cnVjdHVyZSBmb3IgeW91ciBnYW1lcyFcclxuY29uc3QgbWFwUm93ID0gbWFwW3BsYXllclBvc1sxXV07XHJcbm1hcFtwbGF5ZXJQb3NbMV1dID0gbWFwUm93LnNsaWNlKDAscGxheWVyUG9zWzBdKSArICdAJyArIG1hcFJvdy5zbGljZShwbGF5ZXJQb3NbMF0rMSk7XHJcblxyXG4vLyBOb3csIExPT0shXHJcbmZvdi5sb29rKHBsYXllclBvcyk7XHJcblxyXG4vLyBGaXJzdCwgc29tZSBzZXR1cCwgc28gd2UgY2FuIHJlY29yZCBvdXIgb3V0cHV0XHJcbmNvbnN0IHNpbXBsZUxpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNpbXBsZUV2ZW50TGlzdFwiKTtcclxuY29uc3QgY29tcGxleExpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvbXBsZXhFdmVudExpc3RcIik7XHJcblxyXG5cclxuLy8gTGV0cyBtYWtlIGEgaGVscGVyIGZ1bmN0aW9uIHRvIHJlY29yZCBvdXIgb3V0cHV0XHJcbmNvbnN0IHNob3dBY3Rpb24gPSAoYWN0aW9uLCBsaXN0KSA9PiB7XHJcbiAgICAvLyBNYWtlIGEgbGlzdCBpdGVtIGFuZCBhZGQgdGhlIGFjdGlvbiB0byBpdC5cclxuICAgIGNvbnN0IGxpc3RJdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpXHJcbiAgICBsaXN0SXRlbS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShhY3Rpb24pKTtcclxuICAgIC8vIEF0dGFjaCBpdCB0byB0aGUgbGlzdCwgc28gd2UgY2FuIHNlZSB3aGF0IGhhcHBlbnMuXHJcbiAgICBsaXN0LmFwcGVuZENoaWxkKGxpc3RJdGVtKTtcclxufTtcclxuXHJcbi8vIFRoZXJlJ3MgdHdvIHR5cGVzIG9mIGV2ZW50IG1hbmFnZXJzIHlvdSBjYW4gbWFrZS5cclxuLy8gTGV0cyBzdGFydCB3aXRoIHRoZSBzaW1wbGUgb25lLiBFdmVyeW9uZSB0YWtlcyB0dXJucywgb25lIGFmdGVyIHRoZSBvdGhlci5cclxuY29uc3Qgc2ltcGxlRXZlbnRzID0gbmV3IEV2ZW50TWFuYWdlcih7dHlwZTpcInNpbXBsZVwifSk7XHJcblxyXG4vLyBVc3VhbGx5LCB3ZSB3YW50IHRvIGFkZCBzb21lIGFjdG9ycyB0byB0aGUgc3lzdGVtLlxyXG4vLyBUaGUgc3lzdGVtIGNhbGxzIHRoZWlyIFwiYWN0XCIgbWV0aG9kLlxyXG5cclxuY29uc3Qgc2ltcGxlR29ibGluID0ge1xyXG4gICAgYWN0OiAoKT0+c2hvd0FjdGlvbihcIlRoZSBHb2JsaW4gZ29ibGlucyFcIiwgc2ltcGxlTGlzdClcclxufVxyXG5cclxuY29uc3Qgc2ltcGxlQ2F0ID0ge1xyXG4gICAgYWN0OiAoKT0+c2hvd0FjdGlvbihcIlRoZSBjYXQgbWVvd3MhXCIsIHNpbXBsZUxpc3QpXHJcbn1cclxuXHJcbi8vIEFkZCB0aGVtIHRvIHRoZSBldmVudCBtYW5hZ2VyXHJcbnNpbXBsZUV2ZW50cy5hZGQoc2ltcGxlR29ibGluKTtcclxuc2ltcGxlRXZlbnRzLmFkZChzaW1wbGVDYXQpO1xyXG5cclxuLy8gWW91IGNhbiBhbHNvIGFkZCBjYWxsYmFjayBmdW5jdGlvbnMgb24gdGhlaXIgb3duLCBhcyBldmVudHMgb3Igd2hhdGV2ZXIgeW91ciBoZWFydCBwbGVhc2VzLlxyXG4vLyBUaGV5IGNhbiByZXBlYXQgZm9yZXZlci4uLlxyXG5zaW1wbGVFdmVudHMuYWRkKHtcclxuICAgIGNhbGxiYWNrOiAoKT0+c2hvd0FjdGlvbihcIkRyaXAgZHJpcCBnb2VzIHRoZSBmYXVjZXQuXCIsIHNpbXBsZUxpc3QpLFxyXG4gICAgcmVwZWF0czogdHJ1ZVxyXG59KVxyXG5cclxuLy8gUmVwZWF0IGEgZmV3IHRpbWVzXHJcbnNpbXBsZUV2ZW50cy5hZGQoe1xyXG4gICAgY2FsbGJhY2s6ICgpPT5zaG93QWN0aW9uKFwiUnVzaGluZyB3aW5kISBPaCBubyFcIiwgc2ltcGxlTGlzdCksXHJcbiAgICByZXBlYXRzOiAyXHJcbn0pXHJcblxyXG4vLyBPciBub3QgcmVwZWF0IGF0IGFsbCFcclxuc2ltcGxlRXZlbnRzLmFkZCh7XHJcbiAgICBjYWxsYmFjazogKCk9PnNob3dBY3Rpb24oXCJUaGUgaG91c2Ugb2YgY2FyZHMgZmFsbHMgb3Zlci4gV2hvb3BzIVwiLCBzaW1wbGVMaXN0KVxyXG59KTtcclxuXHJcbi8vIFRoZW4geW91IGp1c3Qga2ljayBpdCBvZmYgaW4geW91ciBwcmVmZXJyZWQgbWFubmVyLlxyXG4vLyBFYWNoIHRpbWUgeW91IGNhbGwgYWR2YW5jZSwgaXQgd2lsbCBzdGVwIGZvcndhcmQgb25lIHN0ZXAuXHJcbi8vIElmIGFjdCByZXR1cm5zIGEgcHJvbWlzZSAoc2F5LCBpZiB5b3UncmUgd2FpdGluZyBmb3IgcGxheWVyIGlucHV0KVxyXG4vLyBpdCB3aWxsIHdhaXQgZm9yIHRoYXQgYWN0aW9uIHRvIGNvbmNsdWRlLlxyXG5mb3IobGV0IGk9MDtpPDIwO2krKykge1xyXG4gICAgc2ltcGxlRXZlbnRzLmFkdmFuY2UoKTtcclxufVxyXG5cclxuLy8gVGhlIHNlY29uZCB0eXBlIG9mIGV2ZW50IG1hbmFnZXIgaXMgY29tcGxleDpcclxuY29uc3QgY29tcGxleEV2ZW50cyA9IG5ldyBFdmVudE1hbmFnZXIoe3R5cGU6XCJjb21wbGV4XCJ9KTtcclxuXHJcbi8vIFRoZSBjb21wbGV4IGV2ZW50IG1hbmFnZXIgYWNjZXB0cyBkaWZmZXJlbnQgZGVsYXlzIGZvciBkaWZmZXJlbnQgYWN0b3JzXHJcblxyXG5jb25zdCBmYXN0Q2F0ID0ge1xyXG4gICAgYWN0OigpPT5zaG93QWN0aW9uKFwiRmFzdCBjYXQgbnlvb21zIVwiLCBjb21wbGV4TGlzdClcclxufVxyXG5cclxuY29uc3Qgc2xvd09ncmUgPSB7XHJcbiAgICBhY3Q6KCk9PnNob3dBY3Rpb24oXCJTbG93IG9ncmUgaXMgc2xvb29vd1wiLCBjb21wbGV4TGlzdClcclxufVxyXG5cclxuLy8gVGhlIGRlbGF5IHByb3BlcnR5IGRlZmluZXMgaG93IHNsb3cgYW4gYWN0b3IgaXNcclxuY29tcGxleEV2ZW50cy5hZGQoe1xyXG4gICAgYWN0b3I6ZmFzdENhdCxcclxuICAgIGRlbGF5OjFcclxufSk7XHJcblxyXG5jb21wbGV4RXZlbnRzLmFkZCh7XHJcbiAgICBhY3RvcjpzbG93T2dyZSxcclxuICAgIGRlbGF5OjVcclxufSk7XHJcblxyXG4vLyBPciBob3cgbG9uZyBhbiBldmVudCB0YWtlc1xyXG5jb21wbGV4RXZlbnRzLmFkZCh7XHJcbiAgICBjYWxsYmFjazooKT0+c2hvd0FjdGlvbihcIlRoZSBtYWlsIGhhcyBqdXN0IGFycml2ZWQuIFN3ZWV0IVwiLCBjb21wbGV4TGlzdCksXHJcbiAgICBkZWxheTogMTZcclxufSk7XHJcblxyXG4vLyBBZHZhbmNlIHRoZSBjbG9jay4uLlxyXG5mb3IobGV0IGk9MDtpPDIwO2krKykge1xyXG4gICAgY29tcGxleEV2ZW50cy5hZHZhbmNlKCk7XHJcbn1cclxuXHJcbm1hcFtwbGF5ZXJQb3NbMV1dID0gbWFwUm93LnNsaWNlKDAscGxheWVyUG9zWzBdKSArICcuJyArIG1hcFJvdy5zbGljZShwbGF5ZXJQb3NbMF0rMSk7XHJcblxyXG4vLyBGaXJzdCwgbGV0cyBzZXR1cCBhbm90aGVyIGRpc3BsYXkhIEkgd2FudCB0byBkcmF3IHRoZSBwYXRoIHdlIGZpbmQuXHJcbi8vIEFuZCBsZXRzIHN0YXJ0IHVwIGEgZGlzcGxheSB0byB1c2UuXHJcbi8vIFdlJ3JlIGdvaW5nIHRvIHVzZSB0aGUgc2FtZSBtYXAgZnJvbSB0aGUgRk9WIHNlY3Rpb24uXHJcbmNvbnN0IHBhdGhEaXNwbGF5UGFyYW1zID0ge1xyXG4gICAgdGFyZ2V0OiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBhdGhEaXNwbGF5XCIpLFxyXG4gICAgd2lkdGg6IHdpZHRoLFxyXG4gICAgaGVpZ2h0OiBoZWlnaHQsXHJcbn07XHJcbmNvbnN0IHBhdGhEaXNwbGF5ID0gbmV3IERpc3BsYXkocGF0aERpc3BsYXlQYXJhbXMpO1xyXG5wYXRoRGlzcGxheS50aWxlU2l6ZSA9IHBhdGhEaXNwbGF5LmNhbGN1bGF0ZVRpbGVTaXplKCk7XHJcblxyXG4vLyBMZXRzIGRyYXcgdGhlIG1hcCB0byBzdGFydFxyXG5tYXAuZm9yRWFjaCgocm93LHkpPT5yb3cuc3BsaXQoJycpLmZvckVhY2goKHRpbGUseCk9PntcclxuICAgIHBhdGhEaXNwbGF5LnNldFRpbGUoeCx5LHRpbGUpO1xyXG59KSk7XHJcblxyXG4vLyBOb3csIGxldHMgc2V0dXAgdGhlIHBhdGhmaW5kZXIhXHJcbi8vIFRoZSBQYXRoRmluZGVyIHRha2VzIGEgXCJjYW5QYXNzXCIgY2FsbGJhY2sgdG8gZGV0ZXJtaW5lIHdoYXQgaXMgcGFzc2FibGUuXHJcbi8vIFRoaXMgbG9va3Mgc2ltaWxhciB0byB0aGUgY2FuU2VlIGNhbGxiYWNrIGZyb20gYmVmb3JlLCBidXQgaXQgZG9lc24ndCBoYXZlIHRvLlxyXG5jb25zdCBwYXRoZmluZGVyID0gbmV3IFBhdGhGaW5kZXIoe1xyXG4gICAgY2FuUGFzczooW3gseV0pPT57XHJcbiAgICAgICAgLy8gTWFrZSBzdXJlIGl0J3MgZXZlbiBvbiB0aGUgbWFwXHJcbiAgICAgICAgaWYgKCB4PDAgfHwgeD49d2lkdGggfHwgeTwwIHx8IHk+PWhlaWdodCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHRpbGUgPSBtYXBbeV1beF07XHJcblxyXG4gICAgICAgIC8vIE5leHQsIHVzZSB3aGF0ZXZlciBjcml0ZXJpYSB3ZSB3YW50IHRvIGRlY2lkZSBpZiBpdCBpcyBwYXNzYWJsZS5cclxuICAgICAgICAvLyBJbiB0aGlzIGNhc2UsIGlmIGl0J3Mgbm90IGEgd2FsbCAob3IgIyBjaGFyYWN0ZXIpLCB3ZSBjYW4gd2FsayB0aHJvdWdoIGl0LlxyXG4gICAgICAgIHJldHVybiB0aWxlICE9PSAnIyc7XHJcbiAgICB9XHJcbn0pO1xyXG5cclxuLy8gTGV0IGNob29zZSBhIHN0YXJ0aW5nIHBvc2l0aW9uLCBhbmQgYSB0YXJnZXQgcG9zaXRpb24hXHJcbmNvbnN0IHN0YXJ0UG9zID0gWzEsOF07XHJcbmNvbnN0IGVuZFBvcyA9IFsxNSw4XTtcclxuXHJcbi8vIEl0IGNhbiBhbHNvIHRha2UgYW4gb3B0aW9uYWwgXCJvcnRob2dvbmFsT25seVwiIHBhcmFtZXRlci5cclxuLy8gVGhpcyBzZXRzIHdoZXRoZXIgb3Igbm90IHRoZSBwYXRoZmluZGVyIHdpbGwgdXNlIGRpYWdvbmFscy5cclxuY29uc3Qgb3B0aW9uYWxPcnRob2dvbmFsT25seSA9IGZhbHNlO1xyXG5cclxuLy8gTm93LCBsZXRzIGZpbmQgdGhlIHBhdGghXHJcbmNvbnN0IHBhdGggPSBwYXRoZmluZGVyLmZpbmRQYXRoKHN0YXJ0UG9zLCBlbmRQb3MsIG9wdGlvbmFsT3J0aG9nb25hbE9ubHkpO1xyXG5cclxuLy8gRHJhdyBpdCBvbnRvIHRoZSBtYXAgdG8gdGFrZSBhIGxvb2sgYXQgaXQuXHJcbnBhdGguZm9yRWFjaCgoW3gseV0pPT57XHJcbiAgICBwYXRoRGlzcGxheS51cGRhdGVUaWxlKHgseSx7XHJcbiAgICAgICAgY29udGVudDonWCcsXHJcbiAgICAgICAgY2xhc3NOYW1lOiBcInBhdGhNYXJrZXJcIlxyXG4gICAgfSlcclxufSk7XHJcblxyXG4vLyBOb3RlIHRoYXQgdGhlIGRyYXduIHBhdGggZG9lc24ndCBpbmNsdWRlIHRoZSBzdGFydGluZyBwb3NpdGlvbi5cclxuLy8gVGhpcyBpcyBzbyB5b3UgY2FuIGp1c3QgZ3JhYiBwYXRoWzBdIHRvIGdldCB0aGUgZmlyc3Qgc3RlcCBpbiB5b3VyIGpvdXJuZXkuXHJcbi8vIExldHMgZHJhdyBvbiB0aGUgcGxheWVyLCB0b28sIGZvciBpbGx1c3RyYXRpb24uXHJcbnBhdGhEaXNwbGF5LnVwZGF0ZVRpbGUoc3RhcnRQb3NbMF0sIHN0YXJ0UG9zWzFdLCAnQCcpO1xyXG5cclxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwoKT0+e1xyXG4gICAgY29sb3JEaXNwbGF5LnRpbGVTaXplID0gY29sb3JEaXNwbGF5LmNhbGN1bGF0ZVRpbGVTaXplKCk7XHJcbiAgICBmb3ZEaXNwbGF5LnRpbGVTaXplID0gZm92RGlzcGxheS5jYWxjdWxhdGVUaWxlU2l6ZSgpO1xyXG4gICAgcGF0aERpc3BsYXkudGlsZVNpemUgPSBwYXRoRGlzcGxheS5jYWxjdWxhdGVUaWxlU2l6ZSgpO1xyXG59KTtcclxuXHJcbi8vIFdGQyBkaXNwbGF5XHJcbmNvbnN0IHdmY0Rpc3BsYXlQYXJhbXMgPSB7XHJcbiAgICB0YXJnZXQ6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwid2ZjRGlzcGxheVwiKSxcclxuICAgIHdpZHRoOiAyMCxcclxuICAgIGhlaWdodDogMjAsXHJcbn07XHJcbmNvbnN0IHdmY0Rpc3BsYXkgPSBuZXcgRGlzcGxheSh3ZmNEaXNwbGF5UGFyYW1zKTtcclxud2ZjRGlzcGxheS50aWxlU2l6ZSA9IHdmY0Rpc3BsYXkuY2FsY3VsYXRlVGlsZVNpemUoKTtcclxuXHJcbi8vIFRoZSBXRkMgZ2VuZXJhdG9yIHRha2VzIGFuIGlucHV0IFwiaW1hZ2VcIiwgd2hpY2ggaXQgdXNlcyB0byBmaWd1cmUgb3V0IHJ1bGVzIGZvciB0aGUgb3V0cHV0LlxyXG5jb25zdCBpbnB1dEltYWdlID0gW1xyXG4gICAgXCIuIy4uXCIsXHJcbiAgICBcIi4jLi5cIixcclxuICAgIFwiIyMjI1wiLFxyXG4gICAgXCIuIy4uXCIsXHJcbl07XHJcblxyXG5jb25zdCB3ZmMgPSBuZXcgV0ZDKHtpbnB1dDppbnB1dEltYWdlLG46MyxyZXBlYXRJbnB1dDp0cnVlfSk7XHJcbmNvbnN0IG91dHB1dCA9IHdmYy5nZW5lcmF0ZSh7d2lkdGg6MjAsaGVpZ2h0OjIwLHJlcGVhdE91dHB1dDp0cnVlfSk7XHJcblxyXG5vdXRwdXQuZm9yRWFjaCgocm93LGopPT57XHJcbiAgICByb3cuZm9yRWFjaCgoY29sLGkpPT57XHJcbiAgICAgICAgd2ZjRGlzcGxheS5zZXRUaWxlKGksaixjb2wpO1xyXG4gICAgfSk7XHJcbn0pO1xyXG5cclxuY29uc3Qgd2ZjRGlzcGxheVBhcmFtc1R3byA9IHtcclxuICAgIHRhcmdldDogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ3ZmNEaXNwbGF5VHdvXCIpLFxyXG4gICAgd2lkdGg6IDIwLFxyXG4gICAgaGVpZ2h0OiAyMCxcclxufTtcclxuY29uc3Qgd2ZjRGlzcGxheVR3byA9IG5ldyBEaXNwbGF5KHdmY0Rpc3BsYXlQYXJhbXNUd28pO1xyXG53ZmNEaXNwbGF5VHdvLnRpbGVTaXplID0gd2ZjRGlzcGxheVR3by5jYWxjdWxhdGVUaWxlU2l6ZSgpO1xyXG5cclxuLy8gVGhlIFdGQyBnZW5lcmF0b3IgdGFrZXMgYW4gaW5wdXQgXCJpbWFnZVwiLCB3aGljaCBpdCB1c2VzIHRvIGZpZ3VyZSBvdXQgcnVsZXMgZm9yIHRoZSBvdXRwdXQuXHJcbmNvbnN0IGlucHV0SW1hZ2VUd28gPSBbXHJcbiAgICBcIiAgICAgICAgICAgICAgICAgXCIsXHJcbiAgICBcIiAgICAgICAgICAgICBYICAgXCIsXHJcbiAgICBcIiAgICBYIyAgICAgICAjICAgXCIsXHJcbiAgICBcIiAgICAgIyAgICAgICAjICAgXCIsXHJcbiAgICBcIiAgICAgIyAgWCAgICAjICAgXCIsXHJcbiAgICBcIiAgICAgIyMjIyMjIyMjICAgXCIsXHJcbiAgICBcIiAgICAgIyAgICAgIyAgICAgXCIsXHJcbiAgICBcIiAgICAgIyAgICAgWCAgICAgXCIsXHJcbiAgICBcIiAgICAgWCAgICAgICAgICAgXCIsXHJcbiAgICBcIiAgICAgICAgICAgICAgICAgXCIsXHJcbl07XHJcblxyXG5jb25zdCB3ZmNUd28gPSBuZXcgV0ZDKHtpbnB1dDppbnB1dEltYWdlVHdvLG46MyxyZXBlYXRJbnB1dDp0cnVlfSk7XHJcbmNvbnN0IG91dHB1dFR3byA9IHdmY1R3by5nZW5lcmF0ZSh7d2lkdGg6MjAsaGVpZ2h0OjIwLHJlcGVhdE91dHB1dDp0cnVlfSk7XHJcblxyXG5vdXRwdXRUd28uZm9yRWFjaCgocm93LGopPT57XHJcbiAgICByb3cuZm9yRWFjaCgoY29sLGkpPT57XHJcbiAgICAgICAgd2ZjRGlzcGxheVR3by5zZXRUaWxlKGksaixjb2wpO1xyXG4gICAgfSk7XHJcbn0pO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9